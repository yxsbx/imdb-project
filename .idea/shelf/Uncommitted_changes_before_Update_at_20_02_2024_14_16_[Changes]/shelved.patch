Index: src/main/java/com/imdb/appServices/ValidationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.appServices;\r\n\r\nimport com.imdb.model.Genre;\r\n\r\nimport java.util.EnumSet;\r\nimport java.util.Scanner;\r\n\r\npublic class ValidationService {\r\n    /*essa classe serviria de base pra toda vida que eu tiver um input\r\n    eu veificar se o int é valido, se a string é valida e apagar espaços desnecessários de uma string*/\r\n\r\n    //função geral que recebe todas as entradas com a entrada de linha\r\n    private static String getInput(Scanner sc) {\r\n        return sc.nextLine();\r\n    }\r\n\r\n    //vefica se a entrada é um int\r\n    private static int isInputInt(Scanner sc) {\r\n        // Checks if the entered input is an integer number\r\n\r\n        //converte a entrada string em um int; permite a entrada de numeros negativos.\r\n        try {\r\n            return Integer.parseInt(getInput(sc));\r\n            //se a string for vazia ou nula; caracteres não numéricos; numero não for um int;\r\n            //se tiver espaço em branco.\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"This option is invalid, must be a integer number.\");\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    //faz a mesma coisa que isInputInt(), mas com double\r\n    private static double isInputDouble(Scanner sc) {\r\n        // Checks if the entered input is a fractional number\r\n        try {\r\n            return Double.parseDouble(getInput(sc));\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"This input is invalid, must be a number.\");\r\n            return -1;\r\n        }\r\n    }\r\n\r\n\r\n    public static int isValidOption(Scanner sc, int rangeMax, int rangeMin) {\r\n        // Checks if the entered option is a number and if it is within the range of options\r\n\r\n        //não precisa ser uma constante\r\n        //isInputInt retorna um -1 caso entre no catch\r\n        final int userChoice = isInputInt(sc);\r\n\r\n        //se for -1, ou seja, se não foi um inteiro válido\r\n        if (userChoice == -1) {\r\n            return -1;\r\n            //verifica se é alguma das opções do menu\r\n        } else if (userChoice >= rangeMin && userChoice <= rangeMax) {\r\n            //retorna a opção caso ela esteja no intervalo\r\n            return userChoice;\r\n            //era um número inteiro válido, mas não estava dentro do intervalo das opções\r\n        } else {\r\n            System.out.println(\"This option is invalid, you must choose a number from \" + rangeMin + \" to \" + rangeMax);\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public static String isValidMovieName(Scanner sc) {\r\n\r\n        //recebe uma string como sc.NextLine();\r\n        final String userInput = getInput(sc);\r\n\r\n        /*Check if the movie title is not empty,\r\n         if there are no unnecessary spaces,\r\n         and if it has more than 3 letters*/\r\n\r\n        /* Pi é um filme com 2 letras;\r\n        Q é um filme com 1 letra;\r\n        Resolver problema, pois pode recebr um título com 1 letra;\r\n        Se houver espaços vazios desnecessários, elimina eles e formada a entrada;\r\n         */\r\n\r\n        if (userInput != null && !userInput.trim().isEmpty() && userInput.length() >= 3) {\r\n            return userInput;\r\n        } else {\r\n            System.out.println(\"Invalid title! The movie name must be at least 3 characters long.\");\r\n            return isValidMovieName(sc);\r\n        }\r\n    }\r\n\r\n    public static int isValidId(Scanner sc) {\r\n        try {\r\n            return Integer.parseInt(getInput(sc));\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Dígito inválido. Tente novamente!\");\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public static boolean isValidMovieId(int id) {\r\n        // Verifica se o ID é positivo\r\n        return id > 0;\r\n    }\r\n\r\n    // Verifica se o gênero está presente no enum\r\n    public static boolean isValidGenre(Genre genre) {\r\n        return EnumSet.allOf(Genre.class).contains(genre);\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/com/imdb/appServices/ValidationService.java b/src/main/java/com/imdb/appServices/ValidationService.java
--- a/src/main/java/com/imdb/appServices/ValidationService.java	
+++ b/src/main/java/com/imdb/appServices/ValidationService.java	
@@ -1,106 +1,90 @@
 package com.imdb.appServices;
 
 import com.imdb.model.Genre;
-
 import java.util.EnumSet;
 import java.util.Scanner;
 
 public class ValidationService {
-    /*essa classe serviria de base pra toda vida que eu tiver um input
-    eu veificar se o int é valido, se a string é valida e apagar espaços desnecessários de uma string*/
 
-    //função geral que recebe todas as entradas com a entrada de linha
-    private static String getInput(Scanner sc) {
-        return sc.nextLine();
-    }
+  private static String getInput(Scanner sc) {
+    return sc.nextLine();
+  }
 
-    //vefica se a entrada é um int
-    private static int isInputInt(Scanner sc) {
-        // Checks if the entered input is an integer number
-
-        //converte a entrada string em um int; permite a entrada de numeros negativos.
-        try {
-            return Integer.parseInt(getInput(sc));
-            //se a string for vazia ou nula; caracteres não numéricos; numero não for um int;
-            //se tiver espaço em branco.
-        } catch (NumberFormatException e) {
-            System.out.println("This option is invalid, must be a integer number.");
-            return -1;
-        }
-    }
+  private static int isInputInt(Scanner sc) {
+    // Checks if the entered input is an integer number
+    try {
+      return Integer.parseInt(getInput(sc));
+    } catch (NumberFormatException e) {
+      System.out.println("This option is invalid, must be a integer number.");
+      return -1;
+    }
+  }
 
-    //faz a mesma coisa que isInputInt(), mas com double
-    private static double isInputDouble(Scanner sc) {
-        // Checks if the entered input is a fractional number
-        try {
-            return Double.parseDouble(getInput(sc));
-        } catch (NumberFormatException e) {
-            System.out.println("This input is invalid, must be a number.");
-            return -1;
-        }
-    }
+  private static double isInputDouble(Scanner sc) {
+    // Checks if the entered input is a fractional number
+    try {
+      return Double.parseDouble(getInput(sc));
+    } catch (NumberFormatException e) {
+      System.out.println("This input is invalid, must be a number.");
+      return -1;
+    }
+  }
 
-
-    public static int isValidOption(Scanner sc, int rangeMax, int rangeMin) {
-        // Checks if the entered option is a number and if it is within the range of options
-
-        //não precisa ser uma constante
-        //isInputInt retorna um -1 caso entre no catch
-        final int userChoice = isInputInt(sc);
+  public static int isValidOption(Scanner sc, int rangeMax, int rangeMin) {
+    // Checks if the entered option is a number and if it is within the range of options
+    final int userChoice = isInputInt(sc);
 
-        //se for -1, ou seja, se não foi um inteiro válido
-        if (userChoice == -1) {
-            return -1;
-            //verifica se é alguma das opções do menu
-        } else if (userChoice >= rangeMin && userChoice <= rangeMax) {
-            //retorna a opção caso ela esteja no intervalo
-            return userChoice;
-            //era um número inteiro válido, mas não estava dentro do intervalo das opções
-        } else {
-            System.out.println("This option is invalid, you must choose a number from " + rangeMin + " to " + rangeMax);
-            return -1;
-        }
-    }
+    if (userChoice == -1) {
+      return -1;
+    } else if (userChoice >= rangeMin && userChoice <= rangeMax) {
+      return userChoice;
+    } else {
+      System.out.println(
+        "This option is invalid, you must choose a number from " +
+        rangeMin +
+        " to " +
+        rangeMax
+      );
+      return -1;
+    }
+  }
 
-    public static String isValidMovieName(Scanner sc) {
-
-        //recebe uma string como sc.NextLine();
-        final String userInput = getInput(sc);
-
-        /*Check if the movie title is not empty,
-         if there are no unnecessary spaces,
-         and if it has more than 3 letters*/
+  public static String isValidMovieName(Scanner sc) {
+    /*Check if the movie title is not empty,
+     if there are no unnecessary spaces,
+     and if it has more than 3 letters*/
+    final String userInput = getInput(sc);
 
-        /* Pi é um filme com 2 letras;
-        Q é um filme com 1 letra;
-        Resolver problema, pois pode recebr um título com 1 letra;
-        Se houver espaços vazios desnecessários, elimina eles e formada a entrada;
-         */
-
-        if (userInput != null && !userInput.trim().isEmpty() && userInput.length() >= 3) {
-            return userInput;
-        } else {
-            System.out.println("Invalid title! The movie name must be at least 3 characters long.");
-            return isValidMovieName(sc);
-        }
-    }
+    if (
+      userInput != null &&
+      !userInput.trim().isEmpty() &&
+      userInput.length() >= 3
+    ) {
+      return userInput;
+    } else {
+      System.out.println(
+        "Invalid title! The movie name must be at least 3 characters long."
+      );
+      return isValidMovieName(sc);
+    }
+  }
 
-    public static int isValidId(Scanner sc) {
-        try {
-            return Integer.parseInt(getInput(sc));
-        } catch (NumberFormatException e) {
-            System.out.println("Dígito inválido. Tente novamente!");
-            return -1;
-        }
-    }
+  public static int isValidId(Scanner sc) {
+    try {
+      return Integer.parseInt(getInput(sc));
+    } catch (NumberFormatException e) {
+      System.out.println("Dígito inválido. Tente novamente!");
+      return -1;
+    }
+  }
 
-    public static boolean isValidMovieId(int id) {
-        // Verifica se o ID é positivo
-        return id > 0;
-    }
+  public static boolean isValidMovieId(int id) {
+    // Verifica se o ID é positivo
+    return id > 0;
+  }
 
-    // Verifica se o gênero está presente no enum
-    public static boolean isValidGenre(Genre genre) {
-        return EnumSet.allOf(Genre.class).contains(genre);
-    }
+  public static boolean isValidGenre(Genre genre) {
+    // Verifica se o gênero está presente no enum
+    return EnumSet.allOf(Genre.class).contains(genre);
+  }
 }
