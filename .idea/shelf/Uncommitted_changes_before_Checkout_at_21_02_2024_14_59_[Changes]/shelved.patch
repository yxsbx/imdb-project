Index: src/main/java/com/imdb/controller/MovieController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.controller;\r\n\r\nimport com.imdb.dto.ActorDTO;\r\nimport com.imdb.dto.DirectorDTO;\r\nimport com.imdb.dto.MovieDTO;\r\nimport com.imdb.dto.ShowMovieDTO;\r\nimport com.imdb.model.Director;\r\nimport com.imdb.model.Movie;\r\nimport com.imdb.repository.IActorRepository;\r\nimport com.imdb.repository.IDirectorRepository;\r\nimport com.imdb.repository.IMovieRepository;\r\nimport com.imdb.util.ValidationInputService;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class MovieController {\r\n\r\n    private final IMovieRepository movieRepository;\r\n    private final IActorRepository actorRepository;\r\n    private final IDirectorRepository directorRepository;\r\n    private final ValidationInputService inputValidation;\r\n\r\n    public MovieController(\r\n            IMovieRepository movieRepository,\r\n            IDirectorRepository directorRepository,\r\n            IActorRepository actorRepository,\r\n            ValidationInputService textValidation) {\r\n\r\n        this.actorRepository = actorRepository;\r\n        this.directorRepository = directorRepository;\r\n        this.movieRepository = movieRepository;\r\n        this.inputValidation = textValidation;\r\n\r\n    }\r\n\r\n    public void registerNewMovie() {\r\n        try {\r\n            String name = inputValidation.isValidMovieName();\r\n            int releaseDate = inputValidation.isValidReleaseDate();\r\n            double budget = inputValidation.isValidBudget();\r\n            String currency = inputValidation.enterCurrency();\r\n            String description = inputValidation.isValidDescription();\r\n            List<ActorDTO> actors = enterActors();\r\n            List<DirectorDTO> directors = enterDirectors();\r\n\r\n            MovieDTO newMovie = new MovieDTO(\r\n                    name,\r\n                    releaseDate,\r\n                    budget,\r\n                    currency,\r\n                    description,\r\n                    actors,\r\n                    directors\r\n            );\r\n            movieRepository.addMovie(newMovie);\r\n        } catch (IllegalArgumentException e) {\r\n            System.out.println(\"This movie title already exists.\");\r\n            System.out.print(\"Do you want to edit it? (Yes or No): \");\r\n\r\n            if (inputValidation.yesOrNoValidation()) {\r\n                //editMovie(); AQUIIIIIIIIIIIIIIIIIIIIIIIIII\r\n            } else return;\r\n        }\r\n\r\n        System.out.print(\"Do you want to add a new movie? (Yes or No): \");\r\n        if (inputValidation.yesOrNoValidation()) {\r\n            registerNewMovie();\r\n        } else {\r\n            System.out.println(\"Returning to main menu...\");\r\n        }\r\n    }\r\n\r\n    private List<ActorDTO> enterActors() {\r\n        List<ActorDTO> actors = new ArrayList<>();\r\n        int numberOfActors;\r\n        String nationality;\r\n\r\n        while (true) {\r\n            System.out.print(\"How many actors do you want to add? (Up to 15 actors): \");\r\n            numberOfActors = inputValidation.isInputInt();\r\n\r\n            if (numberOfActors < 1 || numberOfActors > 15) {\r\n                System.err.println(\"You can enter up to 15 actors.\");\r\n            } else {\r\n                for (int i = 1; i <= numberOfActors; i++) {\r\n                    System.out.print(\"Enter the name of actor \" + i + \": \");\r\n\r\n                    ActorDTO newActor = new ActorDTO(\r\n                            inputValidation.isValidPersonName(),\r\n                            inputValidation.isValidNationality()\r\n                    );\r\n\r\n                    try {\r\n                        actorRepository.addActor(newActor);\r\n                        actors.add(newActor);\r\n                    } catch (IllegalArgumentException e) {\r\n                        actors.add(newActor);\r\n                    }\r\n                }\r\n                return actors;\r\n            }\r\n        }\r\n    }\r\n\r\n    private List<DirectorDTO> enterDirectors() {\r\n        List<DirectorDTO> directors = new ArrayList<>();\r\n        int numberOfDirectors;\r\n        String nationality;\r\n\r\n        while (true) {\r\n            System.out.print(\"How many directors do you want to add? (Up to 15 directors): \");\r\n            numberOfDirectors = inputValidation.isInputInt();\r\n\r\n            if (numberOfDirectors < 1 || numberOfDirectors > 15) {\r\n                System.err.println(\"You can enter up to 15 directors.\");\r\n            } else {\r\n                for (int i = 1; i <= numberOfDirectors; i++) {\r\n                    System.out.print(\"Enter the name of director \" + i + \": \");\r\n\r\n                    DirectorDTO newDirector = new DirectorDTO(\r\n                            inputValidation.isValidPersonName(),\r\n                            inputValidation.isValidNationality()\r\n                    );\r\n\r\n                    try {\r\n                        directorRepository.addDirector(newDirector);\r\n                        directors.add(newDirector);\r\n                    } catch (IllegalArgumentException e) {\r\n                        directors.add(newDirector);\r\n                    }\r\n                }\r\n                return directors;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void showListOfMovies() {\r\n\r\n        List<ShowMovieDTO> movies = movieRepository.getAllMovies();\r\n\r\n        if (movies.isEmpty()) {\r\n            System.out.println(\"No movies available.\");\r\n            return;\r\n        }else{\r\n            System.out.println(\"Movies List:\");\r\n            movies.forEach(movie ->\r\n                    System.out.println(\"ID \" + movie.id() + \": \" + movie.title())\r\n            );\r\n\r\n            System.out.println(\r\n                    \"Choose a movie ID to show all movie details or enter 0 to return:\"\r\n            );\r\n\r\n            int movieId = inputValidation.isValidOption(movies.size(),0);\r\n            if (movieId == 0) {\r\n                return;\r\n            }else {\r\n                Optional<MovieDTO> selectedMovie = movieRepository.searchMovieById(movieId);\r\n                if (selectedMovie.isEmpty()) {\r\n                    System.out.println(\"Movie with ID \" + movieId + \" not found.\");\r\n                    return;\r\n                }\r\n                System.out.println(selectedMovie);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*private void printMovieDetails(Movie selectedMovie) {\r\n        System.out.println(\"Movie title: \" + selectedMovie.getTitle());\r\n        System.out.println(\"Release Date: \" + selectedMovie.getReleaseDate());\r\n        System.out.println(\r\n                \"Budget: \" + selectedMovie.getBudget() + \" \" + selectedMovie.getCurrency()\r\n        );\r\n        System.out.println(\"Description: \" + selectedMovie.getDescription());\r\n        System.out.println(\"List of Actors: \");\r\n        List<Actor> actors = selectedMovie.getActors();\r\n        for (int i = 0; i < actors.size(); i++) {\r\n            System.out.println(\r\n                    (i + 1) +\r\n                            \" - \" +\r\n                            actors.get(i).getName() +\r\n                            \"\\t\" +\r\n                            actors.get(i).getNationality()\r\n            );\r\n        }\r\n        System.out.println(\"List of Directors: \");\r\n        List<Director> directors = selectedMovie.getDirectors();\r\n        for (int i = 0; i < directors.size(); i++) {\r\n            System.out.println(\r\n                    (i + 1) +\r\n                            \" - \" +\r\n                            directors.get(i).getName() +\r\n                            \"\\t\" +\r\n                            directors.get(i).getNationality()\r\n            );\r\n        }\r\n\r\n        System.out.print(\"Do you want to edit this movie? (Yes or No): \");\r\n        if (inputValidation.yesOrNoValidation()) {\r\n            editMovie();\r\n        } else {\r\n            System.out.println(\"Returning to the main menu...\");\r\n        }\r\n    }*/\r\n\r\n\r\n   /* public void editMovie() {\r\n        showListOfMovies();\r\n        System.out.println(\"Which movie do you want to edit?\");\r\n        int movieIdToEdit = safeNextInt();\r\n\r\n        Optional<MovieDTO> movieToEdit = movieRepository.searchMovieById(movieIdToEdit);\r\n        if (movieToEdit.isPresent()) {\r\n            System.out.println(\"Editing movie: \" + movieToEdit.get().title());\r\n            System.out.println(\"What would you like to edit?\");\r\n            System.out.println(\"1. Title\");\r\n            System.out.println(\"2. Release Date\");\r\n            System.out.println(\"3. Budget\");\r\n            System.out.println(\"4. Description\");\r\n            System.out.println(\"5. Actors\");\r\n            System.out.println(\"6. Directors\");\r\n            System.out.println(\"7. Cancel\");\r\n            System.out.print(\"Enter your choice: \");\r\n\r\n            int choice = safeNextInt();\r\n            switch (choice) {\r\n                case 1:\r\n                    editTitle(movieToEdit.get());\r\n                    break;\r\n                case 2:\r\n                    editReleaseDate(movieToEdit.get());\r\n                    break;\r\n                case 3:\r\n                    editBudget(movieToEdit.get());\r\n                    break;\r\n                case 4:\r\n                    editDescription(movieToEdit.get());\r\n                    break;\r\n                case 5:\r\n                    //actorService.updateActor(movieToEdit.get().getActors());\r\n                    break;\r\n                case 6:\r\n                    //directorService.updateDirector(movieToEdit.get().getActors());\r\n                    break;\r\n                case 7:\r\n                    System.out.println(\"Cancelling movie edit.\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid choice.\");\r\n                    break;\r\n            }\r\n        } else {\r\n            System.out.println(\"Movie with ID \" + movieIdToEdit + \" not found.\");\r\n        }\r\n    }*/\r\n\r\n    public void editTitle(MovieDTO movie) {\r\n        /*System.out.print(\"Enter the new title: \");\r\n        String newTitle = inputValidation.isValidMovieName();\r\n        movie.setTitle(newTitle);\r\n        movieRepository.updateMovie(movie);\r\n        System.out.println(\"Title updated successfully!\");*/\r\n    }\r\n\r\n    public void editReleaseDate(Movie movie) {\r\n       /* System.out.print(\"Enter the new release date: \");\r\n        int newReleaseDate = inputValidation.isValidReleaseDate();\r\n        movie.setReleaseDate(newReleaseDate);\r\n        System.out.println(\"Release date updated successfully!\");*/\r\n    }\r\n\r\n    public void editBudget(Movie movie) {\r\n       /* System.out.print(\"Enter the new budget: \");\r\n        double newBudget = inputValidation.isValidBudget();\r\n        movie.setBudget(newBudget);\r\n        System.out.println(\"Budget updated successfully!\");*/\r\n    }\r\n\r\n    public void editDescription(Movie movie) {\r\n       /* System.out.print(\"Enter the new description: \");\r\n        String newDescription = inputValidation.isValidDescription();\r\n        movie.setDescription(newDescription);\r\n        System.out.println(\"Description updated successfully!\");*/\r\n    }\r\n\r\n    public void deleteMovie() {\r\n       /* List<ShowMovieDTO> movies = movieRepository.getAllMovies();\r\n        if (movies.isEmpty()) {\r\n            System.out.println(\"No movies available for deletion.\");\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"Movie List:\");\r\n        for (ShowMovieDTO movie : movies) {\r\n            System.out.println(\"ID \" + movie.id() + \": \" + movie.title());\r\n        }\r\n\r\n        System.out.print(\"Enter the ID of the movie you want to delete: \");\r\n        int movieIdToDelete = inputValidation.isInputInt();\r\n\r\n        /*movieRepository.removeMovie (\r\n                movieRepository.searchMovieById(movieIdToDelete).get()\r\n        );*/\r\n    }\r\n\r\n    private int safeNextInt() {\r\n        while (true) {\r\n            try {\r\n                int i = inputValidation.isInputInt();\r\n                return i;\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Invalid input. Please enter a valid number.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void searchMovie() {\r\n        System.out.println(\"Menu - Search\");\r\n        System.out.println(\r\n                \"Do you want to search for a Movie Title, Actor, Director or Release Date?\"\r\n        );\r\n        System.out.println(\"1 - Movie Title\");\r\n        System.out.println(\"2 - Actor\");\r\n        System.out.println(\"3 - Director\");\r\n        System.out.println(\"4 - Release Date\");\r\n        System.out.print(\"Enter your choice: \");\r\n        int searchChoice = inputValidation.isValidOption(4, 1);\r\n\r\n        switch (searchChoice) {\r\n            case 1:\r\n                searchByTitle();\r\n                break;\r\n            case 2:\r\n                searchByActor();\r\n                break;\r\n            case 3:\r\n                searchByDirector();\r\n                break;\r\n            case 4:\r\n                searchByReleaseDate();\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid choice. Returning to main menu...\");\r\n        }\r\n    }\r\n\r\n    private void searchByTitle() {\r\n        System.out.print(\"What is the title of the movie you want to search for? \");\r\n        String title = inputValidation.isValidMovieName();\r\n        ArrayList<Movie> foundMovies = new ArrayList<>();\r\n        /*for (MovieDTO movie : movieRepository.getAllMovies()) {\r\n            if (movie.title().equalsIgnoreCase(title)) {\r\n                foundMovies.add(movie);\r\n            }\r\n        }\r\n        displayMovieTitleSearchResult(foundMovies);*/\r\n    }\r\n\r\n    private void displayMovieTitleSearchResult(List<MovieDTO> movies) {\r\n        if (movies.isEmpty()) {\r\n            System.out.println(\"No movies found.\");\r\n        } else {\r\n            for (MovieDTO movie : movies) {\r\n                System.out.println(\"Movie title: \" + movie.title());\r\n                System.out.println(\"Release Date: \" + movie.releaseDate());\r\n                System.out.println(\r\n                        \"Budget: \" + movie.budget() + \" \" + movie.currency()\r\n                );\r\n                System.out.println(\"Description: \" + movie.description());\r\n                System.out.println(\"List of Actors:\");\r\n                for (ActorDTO actor : movie.actors()) {\r\n                    System.out.println(actor.name());\r\n                }\r\n                System.out.println(\"List of Directors:\");\r\n                for (DirectorDTO director : movie.directors()) {\r\n                    System.out.println(director.name());\r\n                }\r\n                System.out.println(\r\n                        \"Do you want to look for another movie? (Yes or No): \"\r\n                );\r\n\r\n                if (inputValidation.yesOrNoValidation()) {\r\n                    System.out.println(\"Returning to the main menu...\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void searchByActor() {\r\n        /*System.out.print(\"Which actor do you want to look for? \");\r\n        String actorName = inputValidation.isValidPersonName();\r\n        List<MovieDTO> foundMovies = new ArrayList<>();\r\n        for (MovieDTO movie : movieRepository.getAllMovies()) {\r\n            for (ActorDTO actor : movie.actors()) {\r\n                if (actor.name().equalsIgnoreCase(actorName)) {\r\n                    foundMovies.add(movie);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        displayActorSearchResult(foundMovies);*/\r\n    }\r\n\r\n    public void searchByDirector() {\r\n        System.out.print(\"Which director do you want to look for? \");\r\n        String directorName = inputValidation.isValidPersonName();\r\n        Optional<Director> director = directorRepository.searchDirector(directorName);\r\n        if (director.isEmpty()) {\r\n            System.out.println(\"Director not found.\");\r\n            return;\r\n        }\r\n        searchByDirector(movieRepository.getAllMovies(), director.get());\r\n    }\r\n\r\n    private void searchByDirector(List<ShowMovieDTO> allMovies, Director director) {\r\n        /*List<MovieDTO> foundMovies = new ArrayList<>();\r\n        for (MovieDTO movie : allMovies) {\r\n            for (Director dir : movie.directors()) {\r\n                if (dir.getName().equalsIgnoreCase(director.getName())) {\r\n                    foundMovies.add(movie);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        displayDirectorSearchResult(foundMovies);*/\r\n    }\r\n\r\n    private void searchByReleaseDate() {\r\n       /* System.out.print(\"What release year are you looking for? \");\r\n        int releaseDate = inputValidation.isValidReleaseDate();\r\n        List<MovieDTO> foundMovies = new ArrayList<>();\r\n        for (MovieDTO movie : movieRepository.getAllMovies()) {\r\n            if (String.valueOf(movie.getReleaseDate()).equals(releaseDate)) {\r\n                foundMovies.add(movie);\r\n            }\r\n        }\r\n        displayReleaseDateSearchResult(foundMovies);*/\r\n    }\r\n\r\n    private void displayActorSearchResult(List<Movie> movies) {\r\n        if (movies.isEmpty()) {\r\n            System.out.println(\"No movies found for this actor.\");\r\n        } else {\r\n            for (Movie movie : movies) {\r\n                System.out.println(\r\n                        \"Movie title: \" +\r\n                                movie.getTitle() +\r\n                                \"\\tRelease Date: \" +\r\n                                movie.getReleaseDate()\r\n                );\r\n            }\r\n            System.out.println(\r\n                    \"Do you want to see more details about any movie on the list? (Yes or No): \"\r\n            );\r\n            if (inputValidation.yesOrNoValidation()) {\r\n                System.out.print(\"Enter the movie ID: \");\r\n                int movieId = safeNextInt();\r\n                ArrayList<MovieDTO> aux = new ArrayList<>();\r\n                aux.add(movieRepository.searchMovieById(movieId).get());\r\n                displayMovieTitleSearchResult(aux);\r\n            } else {\r\n                System.out.println(\"Returning to the main menu...\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void displayDirectorSearchResult(List<MovieDTO> movies) {\r\n        if (movies.isEmpty()) {\r\n            System.out.println(\"No movies found for this director.\");\r\n        } else {\r\n            for (MovieDTO movie : movies) {\r\n                System.out.println(\r\n                        \"Movie title: \" +\r\n                                movie.title() +\r\n                                \"\\tRelease Date: \" +\r\n                                movie.releaseDate()\r\n                );\r\n            }\r\n            System.out.println(\r\n                    \"Do you want to see more details about any movie on the list? (Yes or No): \"\r\n            );\r\n            if (inputValidation.yesOrNoValidation()) {\r\n                System.out.print(\"Enter the movie ID: \");\r\n                int movieId = inputValidation.isInputInt();\r\n\r\n                Optional<MovieDTO> selectedMovie = movieRepository.searchMovieById(movieId);\r\n                if (selectedMovie.isPresent()) {\r\n                   // printMovieDetails(selectedMovie.get());\r\n                } else {\r\n                    System.out.println(\"Movie with ID \" + movieId + \" not found.\");\r\n                }\r\n            } else {\r\n                System.out.println(\"Returning to the main menu...\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void displayReleaseDateSearchResult(List<MovieDTO> movies) {\r\n        if (movies.isEmpty()) {\r\n            System.out.println(\"No movies found for this release year.\");\r\n        } else {\r\n            for (MovieDTO movie : movies) {\r\n                System.out.println(\"Movie title: \" + movie.title());\r\n            }\r\n            System.out.println(\r\n                    \"Do you want to see more details about any movie on the list? (Yes or No): \"\r\n            );\r\n\r\n\r\n            if (inputValidation.yesOrNoValidation()) {\r\n                System.out.print(\"Enter the movie ID: \");\r\n                int movieId = inputValidation.isInputInt();\r\n                ArrayList<MovieDTO> aux = new ArrayList<>();\r\n                aux.add(movieRepository.searchMovieById(movieId).get());\r\n                displayMovieTitleSearchResult(aux);\r\n            } else {\r\n                System.out.println(\"Returning to the main menu...\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/com/imdb/controller/MovieController.java b/src/main/java/com/imdb/controller/MovieController.java
--- a/src/main/java/com/imdb/controller/MovieController.java	
+++ b/src/main/java/com/imdb/controller/MovieController.java	
@@ -1,526 +1,621 @@
 package com.imdb.controller;
 
-import com.imdb.dto.ActorDTO;
-import com.imdb.dto.DirectorDTO;
-import com.imdb.dto.MovieDTO;
-import com.imdb.dto.ShowMovieDTO;
+import com.imdb.model.Actor;
 import com.imdb.model.Director;
 import com.imdb.model.Movie;
 import com.imdb.repository.IActorRepository;
 import com.imdb.repository.IDirectorRepository;
 import com.imdb.repository.IMovieRepository;
-import com.imdb.util.ValidationInputService;
 
-import java.util.ArrayList;
-import java.util.InputMismatchException;
-import java.util.List;
-import java.util.Optional;
+import java.util.*;
 
 public class MovieController {
 
-    private final IMovieRepository movieRepository;
-    private final IActorRepository actorRepository;
-    private final IDirectorRepository directorRepository;
-    private final ValidationInputService inputValidation;
+  private final IMovieRepository movieRepository;
+  private final IActorRepository actorRepository;
+  private final IDirectorRepository directorRepository;
 
-    public MovieController(
-            IMovieRepository movieRepository,
-            IDirectorRepository directorRepository,
-            IActorRepository actorRepository,
-            ValidationInputService textValidation) {
+  private final Scanner scanner;
 
-        this.actorRepository = actorRepository;
-        this.directorRepository = directorRepository;
-        this.movieRepository = movieRepository;
-        this.inputValidation = textValidation;
-
-    }
+  public MovieController(IMovieRepository movieRepository, IDirectorRepository directorRepository, IActorRepository actorRepository, Scanner scanner) {
+    this.actorRepository = actorRepository;
+    this.directorRepository = directorRepository;
+    this.movieRepository = movieRepository;
+    this.scanner = scanner;
+  }
 
-    public void registerNewMovie() {
-        try {
-            String name = inputValidation.isValidMovieName();
-            int releaseDate = inputValidation.isValidReleaseDate();
-            double budget = inputValidation.isValidBudget();
-            String currency = inputValidation.enterCurrency();
-            String description = inputValidation.isValidDescription();
-            List<ActorDTO> actors = enterActors();
-            List<DirectorDTO> directors = enterDirectors();
+  public void registerNewMovie() {
+    System.out.print("Enter the name of the movie: ");
+    String name = scanner.nextLine();
+    /*iria chamar uma função de impl que pega o nome e
+        verifica pra saber se o nome já existe retornando true ou false.*/
+
+    Optional<Movie> optionalMovie = movieRepository.searchMovie(name);
 
-            MovieDTO newMovie = new MovieDTO(
-                    name,
-                    releaseDate,
-                    budget,
-                    currency,
-                    description,
-                    actors,
-                    directors
-            );
-            movieRepository.addMovie(newMovie);
-        } catch (IllegalArgumentException e) {
-            System.out.println("This movie title already exists.");
-            System.out.print("Do you want to edit it? (Yes or No): ");
-
-            if (inputValidation.yesOrNoValidation()) {
-                //editMovie(); AQUIIIIIIIIIIIIIIIIIIIIIIIIII
-            } else return;
-        }
+    if (optionalMovie.isPresent()) {
+      System.out.println("This movie title already exists.");
+      System.out.print("Do you want to edit it? (Yes or No): ");
+
+      /*posso chamar isInputString pra receber uma string e verificar se não
+      posso chamar outra função de ValidationService que recebe pra verificar se esta no intervalo de opções*/
+
+      String editChoice = scanner.nextLine();
+      if (editChoice.equalsIgnoreCase("Yes")) {
+        editMovie();
+      }
+      return;
+    }
+
+    int releaseDate = enterReleaseDate();
+    double budget = enterBudget();
+    String currency = enterCurrency();
+    String description = enterDescription();
+    List<Actor> actors = enterActors();
+    List<Director> directors = enterDirectors();
+
+    Movie newMovie = new Movie(
+            name,
+            releaseDate,
+            budget,
+            currency,
+            description,
+            actors,
+            directors
+    );
+    movieRepository.addMovie(newMovie);
 
-        System.out.print("Do you want to add a new movie? (Yes or No): ");
-        if (inputValidation.yesOrNoValidation()) {
-            registerNewMovie();
-        } else {
-            System.out.println("Returning to main menu...");
-        }
-    }
+    System.out.print("Do you want to add a new movie? (Yes or No): ");
+    if (scanner.nextLine().equalsIgnoreCase("Yes")) {
+      registerNewMovie();
+    } else {
+      System.out.println("Returning to main menu...");
+    }
+  }
 
-    private List<ActorDTO> enterActors() {
-        List<ActorDTO> actors = new ArrayList<>();
-        int numberOfActors;
-        String nationality;
-
-        while (true) {
-            System.out.print("How many actors do you want to add? (Up to 15 actors): ");
-            numberOfActors = inputValidation.isInputInt();
-
-            if (numberOfActors < 1 || numberOfActors > 15) {
-                System.err.println("You can enter up to 15 actors.");
-            } else {
-                for (int i = 1; i <= numberOfActors; i++) {
-                    System.out.print("Enter the name of actor " + i + ": ");
-
-                    ActorDTO newActor = new ActorDTO(
-                            inputValidation.isValidPersonName(),
-                            inputValidation.isValidNationality()
-                    );
-
-                    try {
-                        actorRepository.addActor(newActor);
-                        actors.add(newActor);
-                    } catch (IllegalArgumentException e) {
-                        actors.add(newActor);
-                    }
-                }
-                return actors;
-            }
-        }
-    }
-
-    private List<DirectorDTO> enterDirectors() {
-        List<DirectorDTO> directors = new ArrayList<>();
-        int numberOfDirectors;
-        String nationality;
-
-        while (true) {
-            System.out.print("How many directors do you want to add? (Up to 15 directors): ");
-            numberOfDirectors = inputValidation.isInputInt();
-
-            if (numberOfDirectors < 1 || numberOfDirectors > 15) {
-                System.err.println("You can enter up to 15 directors.");
-            } else {
-                for (int i = 1; i <= numberOfDirectors; i++) {
-                    System.out.print("Enter the name of director " + i + ": ");
-
-                    DirectorDTO newDirector = new DirectorDTO(
-                            inputValidation.isValidPersonName(),
-                            inputValidation.isValidNationality()
-                    );
-
-                    try {
-                        directorRepository.addDirector(newDirector);
-                        directors.add(newDirector);
-                    } catch (IllegalArgumentException e) {
-                        directors.add(newDirector);
-                    }
-                }
-                return directors;
-            }
-        }
-    }
-
-
-    public void showListOfMovies() {
-
-        List<ShowMovieDTO> movies = movieRepository.getAllMovies();
-
-        if (movies.isEmpty()) {
-            System.out.println("No movies available.");
-            return;
-        }else{
-            System.out.println("Movies List:");
-            movies.forEach(movie ->
-                    System.out.println("ID " + movie.id() + ": " + movie.title())
-            );
-
-            System.out.println(
-                    "Choose a movie ID to show all movie details or enter 0 to return:"
-            );
+  public void showListOfMovies() {
+    List<Movie> movies = movieRepository.getAllMovies();
+    if (movies.isEmpty()) {
+      System.out.println("No movies available.");
+      return;
+    }
+
+    System.out.println("Movies List:");
+    movies.forEach(movie ->
+            System.out.println("ID " + movie.getId() + ": " + movie.getTitle())
+    );
+    System.out.println(
+            "Choose a movie ID to show all movie details or enter 0 to return:"
+    );
 
-            int movieId = inputValidation.isValidOption(movies.size(),0);
-            if (movieId == 0) {
-                return;
-            }else {
-                Optional<MovieDTO> selectedMovie = movieRepository.searchMovieById(movieId);
-                if (selectedMovie.isEmpty()) {
-                    System.out.println("Movie with ID " + movieId + " not found.");
-                    return;
-                }
-                System.out.println(selectedMovie);
-            }
-        }
-    }
+    int movieId = safeNextInt();
+    if (movieId == 0) return;
+
+    Optional<Movie> selectedMovie = movieRepository.searchMovieById(movieId);
+    if (selectedMovie.isEmpty()) {
+      System.out.println("Movie with ID " + movieId + " not found.");
+      return;
+    }
+    printMovieDetails(selectedMovie.get());
+  }
 
-    /*private void printMovieDetails(Movie selectedMovie) {
-        System.out.println("Movie title: " + selectedMovie.getTitle());
-        System.out.println("Release Date: " + selectedMovie.getReleaseDate());
-        System.out.println(
-                "Budget: " + selectedMovie.getBudget() + " " + selectedMovie.getCurrency()
-        );
-        System.out.println("Description: " + selectedMovie.getDescription());
-        System.out.println("List of Actors: ");
-        List<Actor> actors = selectedMovie.getActors();
-        for (int i = 0; i < actors.size(); i++) {
-            System.out.println(
-                    (i + 1) +
-                            " - " +
-                            actors.get(i).getName() +
-                            "\t" +
-                            actors.get(i).getNationality()
-            );
-        }
-        System.out.println("List of Directors: ");
-        List<Director> directors = selectedMovie.getDirectors();
-        for (int i = 0; i < directors.size(); i++) {
-            System.out.println(
-                    (i + 1) +
-                            " - " +
-                            directors.get(i).getName() +
-                            "\t" +
-                            directors.get(i).getNationality()
-            );
-        }
+  private void printMovieDetails(Movie selectedMovie) {
+    System.out.println("Movie title: " + selectedMovie.getTitle());
+    System.out.println("Release Date: " + selectedMovie.getReleaseDate());
+    System.out.println(
+            "Budget: " + selectedMovie.getBudget() + " " + selectedMovie.getCurrency()
+    );
+    System.out.println("Description: " + selectedMovie.getDescription());
+    System.out.println("List of Actors: ");
+    List<Actor> actors = selectedMovie.getActors();
+    for (int i = 0; i < actors.size(); i++) {
+      System.out.println(
+              (i + 1) +
+              " - " +
+              actors.get(i).getName() +
+              "\t" +
+              actors.get(i).getNationality()
+      );
+    }
+    System.out.println("List of Directors: ");
+    List<Director> directors = selectedMovie.getDirectors();
+    for (int i = 0; i < directors.size(); i++) {
+      System.out.println(
+              (i + 1) +
+              " - " +
+              directors.get(i).getName() +
+              "\t" +
+              directors.get(i).getNationality()
+      );
+    }
 
-        System.out.print("Do you want to edit this movie? (Yes or No): ");
-        if (inputValidation.yesOrNoValidation()) {
-            editMovie();
-        } else {
-            System.out.println("Returning to the main menu...");
-        }
-    }*/
+    System.out.print("Do you want to edit this movie? (Yes or No): ");
+    String editChoice = scanner.nextLine();
+    if (editChoice.equalsIgnoreCase("Yes")) {
+      editMovie();
+    } else {
+      System.out.println("Returning to the main menu...");
+    }
+  }
+
+  private double enterBudget() {
+    System.out.print("Budget: ");
+    double budget = scanner.nextDouble();
+    scanner.nextLine();
+    return budget;
+  }
+
+  private int enterReleaseDate() {
+    System.out.print(
+            "Enter Movie Release Date (Year of release that must accept a number with only 4 digits and must not start with 0): "
+    );
+    while (true) {
+      try {
+        int releaseDate = Integer.parseInt(scanner.nextLine());
+        if (String.valueOf(releaseDate).length() != 4) {
+          throw new IllegalArgumentException(
+                  "The year of release must contain only 4 digits. Type it again!"
+          );
+        } else if (String.valueOf(releaseDate).startsWith("0")) {
+          throw new IllegalArgumentException(
+                  "Release year must not start with 0. Enter again!"
+          );
+        }
+        return releaseDate;
+      } catch (NumberFormatException e) {
+        System.out.println(
+                "The year of release must not contain letters. Type it again!"
+        );
+      } catch (IllegalArgumentException e) {
+        System.out.println(e.getMessage());
+      }
+    }
+  }
+
+  private String enterCurrency() {
+    System.out.println(
+            "Enter the movie Budget. Will it be in Euro, Dollar or Real?"
+    );
+    System.out.println("1 - Euro");
+    System.out.println("2 - Dollar");
+    System.out.println("3 - Real");
+    System.out.print("Enter your choice: ");
+    while (true) {
+      try {
+        int currencyChoice = Integer.parseInt(scanner.nextLine());
+        return switch (currencyChoice) {
+          case 1 -> "Euro";
+          case 2 -> "Dollar";
+          case 3 -> "Real";
+          default -> throw new IllegalArgumentException(
+                  "This currency does not exist. Enter a number from 1 to 3."
+          );
+        };
+      } catch (NumberFormatException e) {
+        System.out.println("Invalid input. Please enter a number.");
+      } catch (IllegalArgumentException e) {
+        System.out.println(e.getMessage());
+      }
+    }
+  }
+
+  private String enterDescription() {
+    System.out.print(
+            "Enter the description of the movie (must not exceed 500 words): "
+    );
+    while (true) {
+      String description = scanner.nextLine();
+      if (description.length() > 500) {
+        System.out.println(
+                "The description cannot exceed 500 words. Type it again!"
+        );
+      } else {
+        return description;
+      }
+    }
+  }
+
+  private List<Actor> enterActors() {
+    List<Actor> actors = new ArrayList<>();
+    int numberOfActors;
+    while (true) {
+      System.out.print(
+              "How many actors do you want to add? (It will not be possible to add more than 15 actors): "
+      );
+      try {
+        numberOfActors = Integer.parseInt(scanner.nextLine());
+        if (numberOfActors < 1 || numberOfActors > 15) {
+          throw new IllegalArgumentException("You can enter up to 15 actors.");
+        }
+        break;
+      } catch (NumberFormatException e) {
+        System.out.println("Invalid input. Please enter a number.");
+      } catch (IllegalArgumentException e) {
+        System.out.println(e.getMessage());
+      }
+    }
+
+    for (int i = 1; i <= numberOfActors; i++) {
+      System.out.print("Enter the name of actor " + i + ": ");
+      String actorName = scanner.nextLine();
+      Optional<Actor> existingActor = actorRepository.searchActor(actorName);
+
+      String nationality;
+      if (existingActor.isPresent()) {
+        System.out.println("Actor already exists.");
+      } else {
+        System.out.print("Add nationality: ");
+        nationality = scanner.nextLine();
+        Actor newActor = new Actor(actorName, nationality);
+        actorRepository.addActor(newActor);
+        actors.add(newActor);
+      }
+    }
+    return actors;
+  }
 
+  private List<Director> enterDirectors() {
+    List<Director> directors = new ArrayList<>();
+    int numberOfDirectors;
+    while (true) {
+      System.out.print(
+              "How many directors do you want to add? (It will not be possible to add more than 10 directors): "
+      );
+      try {
+        numberOfDirectors = Integer.parseInt(scanner.nextLine());
+        if (numberOfDirectors < 1 || numberOfDirectors > 10) {
+          throw new IllegalArgumentException(
+                  "You can enter up to 10 directors."
+          );
+        }
+        break;
+      } catch (NumberFormatException e) {
+        System.out.println("Invalid input. Please enter a number.");
+      } catch (IllegalArgumentException e) {
+        System.out.println(e.getMessage());
+      }
+    }
 
-   /* public void editMovie() {
-        showListOfMovies();
-        System.out.println("Which movie do you want to edit?");
-        int movieIdToEdit = safeNextInt();
+    for (int i = 1; i <= numberOfDirectors; i++) {
+      System.out.print("Enter the name of director " + i + ": ");
+      String directorName = scanner.nextLine();
+      Optional<Director> existingDirector = directorRepository.searchDirector(
+              directorName
+      );
+      String nationality;
+      if (existingDirector.isPresent()) {
+        System.out.println("Director already exists.");
+      } else {
+        System.out.print("Add nationality: ");
+        nationality = scanner.nextLine();
+        Director newDiretor = new Director(directorName, nationality);
+        directorRepository.addDirector(newDiretor);
+        directors.add(newDiretor);
+      }
+    }
+    return directors;
+  }
+
+  public void editMovie() {
+    showListOfMovies();
+    System.out.println("Which movie do you want to edit?");
+    int movieIdToEdit = safeNextInt();
 
-        Optional<MovieDTO> movieToEdit = movieRepository.searchMovieById(movieIdToEdit);
-        if (movieToEdit.isPresent()) {
-            System.out.println("Editing movie: " + movieToEdit.get().title());
-            System.out.println("What would you like to edit?");
-            System.out.println("1. Title");
-            System.out.println("2. Release Date");
-            System.out.println("3. Budget");
-            System.out.println("4. Description");
-            System.out.println("5. Actors");
-            System.out.println("6. Directors");
-            System.out.println("7. Cancel");
-            System.out.print("Enter your choice: ");
+    Optional<Movie> movieToEdit = movieRepository.searchMovieById(movieIdToEdit);
+    if (movieToEdit.isPresent()) {
+      System.out.println("Editing movie: " + movieToEdit.get().getTitle());
+      System.out.println("What would you like to edit?");
+      System.out.println("1. Title");
+      System.out.println("2. Release Date");
+      System.out.println("3. Budget");
+      System.out.println("4. Description");
+      System.out.println("5. Actors");
+      System.out.println("6. Directors");
+      System.out.println("7. Cancel");
+      System.out.print("Enter your choice: ");
 
-            int choice = safeNextInt();
-            switch (choice) {
-                case 1:
-                    editTitle(movieToEdit.get());
-                    break;
-                case 2:
-                    editReleaseDate(movieToEdit.get());
-                    break;
-                case 3:
-                    editBudget(movieToEdit.get());
-                    break;
-                case 4:
-                    editDescription(movieToEdit.get());
-                    break;
-                case 5:
-                    //actorService.updateActor(movieToEdit.get().getActors());
-                    break;
-                case 6:
-                    //directorService.updateDirector(movieToEdit.get().getActors());
-                    break;
-                case 7:
-                    System.out.println("Cancelling movie edit.");
-                    break;
-                default:
-                    System.out.println("Invalid choice.");
-                    break;
-            }
-        } else {
-            System.out.println("Movie with ID " + movieIdToEdit + " not found.");
-        }
-    }*/
+      int choice = safeNextInt();
+      switch (choice) {
+        case 1:
+          editTitle(movieToEdit.get());
+          break;
+        case 2:
+          editReleaseDate(movieToEdit.get());
+          break;
+        case 3:
+          editBudget(movieToEdit.get());
+          break;
+        case 4:
+          editDescription(movieToEdit.get());
+          break;
+        case 5:
+          //actorService.updateActor(movieToEdit.get().getActors());
+          break;
+        case 6:
+          //directorService.updateDirector(movieToEdit.get().getActors());
+          break;
+        case 7:
+          System.out.println("Cancelling movie edit.");
+          break;
+        default:
+          System.out.println("Invalid choice.");
+          break;
+      }
+    } else {
+      System.out.println("Movie with ID " + movieIdToEdit + " not found.");
+    }
+  }
 
-    public void editTitle(MovieDTO movie) {
-        /*System.out.print("Enter the new title: ");
-        String newTitle = inputValidation.isValidMovieName();
-        movie.setTitle(newTitle);
-        movieRepository.updateMovie(movie);
-        System.out.println("Title updated successfully!");*/
-    }
+  public void editTitle(Movie movie) {
+    System.out.print("Enter the new title: ");
+    String newTitle = scanner.nextLine();
+    movie.setTitle(newTitle);
+    movieRepository.updateMovie(movie);
+    System.out.println("Title updated successfully!");
+  }
 
-    public void editReleaseDate(Movie movie) {
-       /* System.out.print("Enter the new release date: ");
-        int newReleaseDate = inputValidation.isValidReleaseDate();
-        movie.setReleaseDate(newReleaseDate);
-        System.out.println("Release date updated successfully!");*/
-    }
+  public void editReleaseDate(Movie movie) {
+    System.out.print("Enter the new release date: ");
+    int newReleaseDate = scanner.nextInt();
+    scanner.nextLine();
+    movie.setReleaseDate(newReleaseDate);
+    System.out.println("Release date updated successfully!");
+  }
 
-    public void editBudget(Movie movie) {
-       /* System.out.print("Enter the new budget: ");
-        double newBudget = inputValidation.isValidBudget();
-        movie.setBudget(newBudget);
-        System.out.println("Budget updated successfully!");*/
-    }
+  public void editBudget(Movie movie) {
+    System.out.print("Enter the new budget: ");
+    double newBudget = scanner.nextDouble();
+    scanner.nextLine();
+    movie.setBudget(newBudget);
+    System.out.println("Budget updated successfully!");
+  }
 
-    public void editDescription(Movie movie) {
-       /* System.out.print("Enter the new description: ");
-        String newDescription = inputValidation.isValidDescription();
-        movie.setDescription(newDescription);
-        System.out.println("Description updated successfully!");*/
-    }
+  public void editDescription(Movie movie) {
+    System.out.print("Enter the new description: ");
+    String newDescription = scanner.nextLine();
+    movie.setDescription(newDescription);
+    System.out.println("Description updated successfully!");
+  }
 
-    public void deleteMovie() {
-       /* List<ShowMovieDTO> movies = movieRepository.getAllMovies();
-        if (movies.isEmpty()) {
-            System.out.println("No movies available for deletion.");
-            return;
-        }
+  public void deleteMovie() {
+    List<Movie> movies = movieRepository.getAllMovies();
+    if (movies.isEmpty()) {
+      System.out.println("No movies available for deletion.");
+      return;
+    }
 
-        System.out.println("Movie List:");
-        for (ShowMovieDTO movie : movies) {
-            System.out.println("ID " + movie.id() + ": " + movie.title());
-        }
+    System.out.println("Movie List:");
+    for (Movie movie : movies) {
+      System.out.println("ID " + movie.getId() + ": " + movie.getTitle());
+    }
 
-        System.out.print("Enter the ID of the movie you want to delete: ");
-        int movieIdToDelete = inputValidation.isInputInt();
+    System.out.print("Enter the ID of the movie you want to delete: ");
+    int movieIdToDelete = scanner.nextInt();
+    scanner.nextLine();
 
-        /*movieRepository.removeMovie (
-                movieRepository.searchMovieById(movieIdToDelete).get()
-        );*/
-    }
+    movieRepository.removeMovie(
+            movieRepository.searchMovieById(movieIdToDelete).get()
+    );
+  }
 
-    private int safeNextInt() {
-        while (true) {
-            try {
-                int i = inputValidation.isInputInt();
-                return i;
-            } catch (InputMismatchException e) {
-                System.out.println("Invalid input. Please enter a valid number.");
-            }
-        }
-    }
+  private int safeNextInt() {
+    while (true) {
+      try {
+        int i = scanner.nextInt();
+        scanner.nextLine();
+        return i;
+      } catch (InputMismatchException e) {
+        scanner.nextLine();
+        System.out.println("Invalid input. Please enter a valid number.");
+      }
+    }
+  }
 
-    public void searchMovie() {
-        System.out.println("Menu - Search");
-        System.out.println(
-                "Do you want to search for a Movie Title, Actor, Director or Release Date?"
-        );
-        System.out.println("1 - Movie Title");
-        System.out.println("2 - Actor");
-        System.out.println("3 - Director");
-        System.out.println("4 - Release Date");
-        System.out.print("Enter your choice: ");
-        int searchChoice = inputValidation.isValidOption(4, 1);
+  public void searchMovie() {
+    System.out.println("Menu - Search");
+    System.out.println(
+            "Do you want to search for a Movie Title, Actor, Director or Release Date?"
+    );
+    System.out.println("1 - Movie Title");
+    System.out.println("2 - Actor");
+    System.out.println("3 - Director");
+    System.out.println("4 - Release Date");
+    System.out.print("Enter your choice: ");
+    int searchChoice = scanner.nextInt();
+    scanner.nextLine();
 
-        switch (searchChoice) {
-            case 1:
-                searchByTitle();
-                break;
-            case 2:
-                searchByActor();
-                break;
-            case 3:
-                searchByDirector();
-                break;
-            case 4:
-                searchByReleaseDate();
-                break;
-            default:
-                System.out.println("Invalid choice. Returning to main menu...");
-        }
-    }
+    switch (searchChoice) {
+      case 1:
+        searchByTitle();
+        break;
+      case 2:
+        searchByActor();
+        break;
+      case 3:
+        searchByDirector();
+        break;
+      case 4:
+        searchByReleaseDate();
+        break;
+      default:
+        System.out.println("Invalid choice. Returning to main menu...");
+    }
+  }
 
-    private void searchByTitle() {
-        System.out.print("What is the title of the movie you want to search for? ");
-        String title = inputValidation.isValidMovieName();
-        ArrayList<Movie> foundMovies = new ArrayList<>();
-        /*for (MovieDTO movie : movieRepository.getAllMovies()) {
-            if (movie.title().equalsIgnoreCase(title)) {
-                foundMovies.add(movie);
-            }
-        }
-        displayMovieTitleSearchResult(foundMovies);*/
-    }
+  private void searchByTitle() {
+    System.out.print("What is the title of the movie you want to search for? ");
+    String title = scanner.nextLine();
+    ArrayList<Movie> foundMovies = new ArrayList<>();
+    for (Movie movie : movieRepository.getAllMovies()) {
+      if (movie.getTitle().equalsIgnoreCase(title)) {
+        foundMovies.add(movie);
+      }
+    }
+    displayMovieTitleSearchResult(foundMovies);
+  }
 
-    private void displayMovieTitleSearchResult(List<MovieDTO> movies) {
-        if (movies.isEmpty()) {
-            System.out.println("No movies found.");
-        } else {
-            for (MovieDTO movie : movies) {
-                System.out.println("Movie title: " + movie.title());
-                System.out.println("Release Date: " + movie.releaseDate());
-                System.out.println(
-                        "Budget: " + movie.budget() + " " + movie.currency()
-                );
-                System.out.println("Description: " + movie.description());
-                System.out.println("List of Actors:");
-                for (ActorDTO actor : movie.actors()) {
-                    System.out.println(actor.name());
-                }
-                System.out.println("List of Directors:");
-                for (DirectorDTO director : movie.directors()) {
-                    System.out.println(director.name());
-                }
-                System.out.println(
-                        "Do you want to look for another movie? (Yes or No): "
-                );
-
-                if (inputValidation.yesOrNoValidation()) {
-                    System.out.println("Returning to the main menu...");
-                    break;
-                }
-            }
-        }
-    }
+  private void displayMovieTitleSearchResult(List<Movie> movies) {
+    if (movies.isEmpty()) {
+      System.out.println("No movies found.");
+    } else {
+      for (Movie movie : movies) {
+        System.out.println("Movie title: " + movie.getTitle());
+        System.out.println("Release Date: " + movie.getReleaseDate());
+        System.out.println(
+                "Budget: " + movie.getBudget() + " " + movie.getCurrency()
+        );
+        System.out.println("Description: " + movie.getDescription());
+        System.out.println("List of Actors:");
+        for (Actor actor : movie.getActors()) {
+          System.out.println(actor.getName());
+        }
+        System.out.println("List of Directors:");
+        for (Director director : movie.getDirectors()) {
+          System.out.println(director.getName());
+        }
+        System.out.println(
+                "Do you want to look for another movie? (Yes or No): "
+        );
+        String choice = scanner.nextLine();
+        if (!choice.equalsIgnoreCase("Yes")) {
+          System.out.println("Returning to the main menu...");
+          break;
+        }
+      }
+    }
+  }
 
-    private void searchByActor() {
-        /*System.out.print("Which actor do you want to look for? ");
-        String actorName = inputValidation.isValidPersonName();
-        List<MovieDTO> foundMovies = new ArrayList<>();
-        for (MovieDTO movie : movieRepository.getAllMovies()) {
-            for (ActorDTO actor : movie.actors()) {
-                if (actor.name().equalsIgnoreCase(actorName)) {
-                    foundMovies.add(movie);
-                    break;
-                }
-            }
-        }
-        displayActorSearchResult(foundMovies);*/
-    }
+  private void searchByActor() {
+    System.out.print("Which actor do you want to look for? ");
+    String actorName = scanner.nextLine();
+    List<Movie> foundMovies = new ArrayList<>();
+    for (Movie movie : movieRepository.getAllMovies()) {
+      for (Actor actor : movie.getActors()) {
+        if (actor.getName().equalsIgnoreCase(actorName)) {
+          foundMovies.add(movie);
+          break;
+        }
+      }
+    }
+    displayActorSearchResult(foundMovies);
+  }
 
-    public void searchByDirector() {
-        System.out.print("Which director do you want to look for? ");
-        String directorName = inputValidation.isValidPersonName();
-        Optional<Director> director = directorRepository.searchDirector(directorName);
-        if (director.isEmpty()) {
-            System.out.println("Director not found.");
-            return;
-        }
-        searchByDirector(movieRepository.getAllMovies(), director.get());
-    }
+  public void searchByDirector() {
+    System.out.print("Which director do you want to look for? ");
+    String directorName = scanner.nextLine();
+    Optional<Director> director = directorRepository.searchDirector(directorName);
+    if (director.isEmpty()) {
+      System.out.println("Director not found.");
+      return;
+    }
+    searchByDirector(movieRepository.getAllMovies(), director.get());
+  }
 
-    private void searchByDirector(List<ShowMovieDTO> allMovies, Director director) {
-        /*List<MovieDTO> foundMovies = new ArrayList<>();
-        for (MovieDTO movie : allMovies) {
-            for (Director dir : movie.directors()) {
-                if (dir.getName().equalsIgnoreCase(director.getName())) {
-                    foundMovies.add(movie);
-                    break;
-                }
-            }
-        }
-        displayDirectorSearchResult(foundMovies);*/
-    }
+  private void searchByDirector(List<Movie> allMovies, Director director) {
+    List<Movie> foundMovies = new ArrayList<>();
+    for (Movie movie : allMovies) {
+      for (Director dir : movie.getDirectors()) {
+        if (dir.getName().equalsIgnoreCase(director.getName())) {
+          foundMovies.add(movie);
+          break;
+        }
+      }
+    }
+    displayDirectorSearchResult(foundMovies);
+  }
 
-    private void searchByReleaseDate() {
-       /* System.out.print("What release year are you looking for? ");
-        int releaseDate = inputValidation.isValidReleaseDate();
-        List<MovieDTO> foundMovies = new ArrayList<>();
-        for (MovieDTO movie : movieRepository.getAllMovies()) {
-            if (String.valueOf(movie.getReleaseDate()).equals(releaseDate)) {
-                foundMovies.add(movie);
-            }
-        }
-        displayReleaseDateSearchResult(foundMovies);*/
-    }
+  private void searchByReleaseDate() {
+    System.out.print("What release year are you looking for? ");
+    String releaseDate = scanner.nextLine();
+    List<Movie> foundMovies = new ArrayList<>();
+    for (Movie movie : movieRepository.getAllMovies()) {
+      if (String.valueOf(movie.getReleaseDate()).equals(releaseDate)) {
+        foundMovies.add(movie);
+      }
+    }
+    displayReleaseDateSearchResult(foundMovies);
+  }
 
-    private void displayActorSearchResult(List<Movie> movies) {
-        if (movies.isEmpty()) {
-            System.out.println("No movies found for this actor.");
-        } else {
-            for (Movie movie : movies) {
-                System.out.println(
-                        "Movie title: " +
-                                movie.getTitle() +
-                                "\tRelease Date: " +
-                                movie.getReleaseDate()
-                );
-            }
-            System.out.println(
-                    "Do you want to see more details about any movie on the list? (Yes or No): "
-            );
-            if (inputValidation.yesOrNoValidation()) {
-                System.out.print("Enter the movie ID: ");
-                int movieId = safeNextInt();
-                ArrayList<MovieDTO> aux = new ArrayList<>();
-                aux.add(movieRepository.searchMovieById(movieId).get());
-                displayMovieTitleSearchResult(aux);
-            } else {
-                System.out.println("Returning to the main menu...");
-            }
-        }
-    }
+  private void displayActorSearchResult(List<Movie> movies) {
+    if (movies.isEmpty()) {
+      System.out.println("No movies found for this actor.");
+    } else {
+      for (Movie movie : movies) {
+        System.out.println(
+                "Movie title: " +
+                movie.getTitle() +
+                "\tRelease Date: " +
+                movie.getReleaseDate()
+        );
+      }
+      System.out.println(
+              "Do you want to see more details about any movie on the list? (Yes or No): "
+      );
+      String choice = scanner.nextLine();
+      if (choice.equalsIgnoreCase("Yes")) {
+        System.out.print("Enter the movie ID: ");
+        int movieId = safeNextInt();
+        ArrayList<Movie> aux = new ArrayList<>();
+        aux.add(movieRepository.searchMovieById(movieId).get());
+        displayMovieTitleSearchResult(aux);
+      } else {
+        System.out.println("Returning to the main menu...");
+      }
+    }
+  }
 
-    private void displayDirectorSearchResult(List<MovieDTO> movies) {
-        if (movies.isEmpty()) {
-            System.out.println("No movies found for this director.");
-        } else {
-            for (MovieDTO movie : movies) {
-                System.out.println(
-                        "Movie title: " +
-                                movie.title() +
-                                "\tRelease Date: " +
-                                movie.releaseDate()
-                );
-            }
-            System.out.println(
-                    "Do you want to see more details about any movie on the list? (Yes or No): "
-            );
-            if (inputValidation.yesOrNoValidation()) {
-                System.out.print("Enter the movie ID: ");
-                int movieId = inputValidation.isInputInt();
-
-                Optional<MovieDTO> selectedMovie = movieRepository.searchMovieById(movieId);
-                if (selectedMovie.isPresent()) {
-                   // printMovieDetails(selectedMovie.get());
-                } else {
-                    System.out.println("Movie with ID " + movieId + " not found.");
-                }
-            } else {
-                System.out.println("Returning to the main menu...");
-            }
-        }
-    }
+  private void displayDirectorSearchResult(List<Movie> movies) {
+    if (movies.isEmpty()) {
+      System.out.println("No movies found for this director.");
+    } else {
+      for (Movie movie : movies) {
+        System.out.println(
+                "Movie title: " +
+                movie.getTitle() +
+                "\tRelease Date: " +
+                movie.getReleaseDate()
+        );
+      }
+      System.out.println(
+              "Do you want to see more details about any movie on the list? (Yes or No): "
+      );
+      String choice = scanner.nextLine();
+      if (choice.equalsIgnoreCase("Yes")) {
+        System.out.print("Enter the movie ID: ");
+        int movieId = scanner.nextInt();
+        scanner.nextLine();
+        Optional<Movie> selectedMovie = movieRepository.searchMovieById(movieId);
+        if (selectedMovie.isPresent()) {
+          printMovieDetails(selectedMovie.get());
+        } else {
+          System.out.println("Movie with ID " + movieId + " not found.");
+        }
+      } else {
+        System.out.println("Returning to the main menu...");
+      }
+    }
+  }
 
-    private void displayReleaseDateSearchResult(List<MovieDTO> movies) {
-        if (movies.isEmpty()) {
-            System.out.println("No movies found for this release year.");
-        } else {
-            for (MovieDTO movie : movies) {
-                System.out.println("Movie title: " + movie.title());
-            }
-            System.out.println(
-                    "Do you want to see more details about any movie on the list? (Yes or No): "
-            );
-
-
-            if (inputValidation.yesOrNoValidation()) {
-                System.out.print("Enter the movie ID: ");
-                int movieId = inputValidation.isInputInt();
-                ArrayList<MovieDTO> aux = new ArrayList<>();
-                aux.add(movieRepository.searchMovieById(movieId).get());
-                displayMovieTitleSearchResult(aux);
-            } else {
-                System.out.println("Returning to the main menu...");
-            }
-        }
-    }
+  private void displayReleaseDateSearchResult(List<Movie> movies) {
+    if (movies.isEmpty()) {
+      System.out.println("No movies found for this release year.");
+    } else {
+      for (Movie movie : movies) {
+        System.out.println("Movie title: " + movie.getTitle());
+      }
+      System.out.println(
+              "Do you want to see more details about any movie on the list? (Yes or No): "
+      );
+      String choice = scanner.nextLine();
+      if (choice.equalsIgnoreCase("Yes")) {
+        System.out.print("Enter the movie ID: ");
+        int movieId = scanner.nextInt();
+        scanner.nextLine();
+        ArrayList<Movie> aux = new ArrayList<>();
+        aux.add(movieRepository.searchMovieById(movieId).get());
+        displayMovieTitleSearchResult(aux);
+      } else {
+        System.out.println("Returning to the main menu...");
+      }
+    }
+  }
 }
Index: src/main/java/com/imdb/model/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.model;\r\n\r\npublic abstract class Person {\r\n\r\n    private int id;\r\n    private String name;\r\n    private String nationality;\r\n\r\n    public Person(String name, String nationality) {\r\n        this.name = name;\r\n        this.nationality = nationality;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getNationality() {\r\n        return nationality;\r\n    }\r\n\r\n    public void setNationality(String nationality) {\r\n        this.nationality = nationality;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Person{\" +\r\n                \"id=\" + id +\r\n                \", name='\" + name + '\\'' +\r\n                \", nationality='\" + nationality + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/com/imdb/model/Person.java b/src/main/java/com/imdb/model/Person.java
--- a/src/main/java/com/imdb/model/Person.java	
+++ b/src/main/java/com/imdb/model/Person.java	
@@ -1,5 +1,10 @@
 package com.imdb.model;
 
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+
 public abstract class Person {
 
     private int id;
