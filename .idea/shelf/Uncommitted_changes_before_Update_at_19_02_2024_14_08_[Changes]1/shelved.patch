Index: src/main/java/com/imdb/model/Director.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.model;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic class Director extends Person {\r\n\r\n  public Director(String name, String nationality) {\r\n    super(name, nationality);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/imdb/model/Director.java b/src/main/java/com/imdb/model/Director.java
--- a/src/main/java/com/imdb/model/Director.java	
+++ b/src/main/java/com/imdb/model/Director.java	
@@ -1,10 +1,27 @@
 package com.imdb.model;
 
-import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
 
 public class Director extends Person {
+  private Set<Movie> movies = new HashSet<>();
+
+  public Director() {}
+
+  public Director(Long id, String name, String nationality) {
+    super(id, name, nationality);
+  }
+
+  public Set<Movie> getMovies() {
+    return movies;
+  }
 
-  public Director(String name, String nationality) {
-    super(name, nationality);
+  public void setMovies(Set<Movie> movies) {
+    this.movies = movies;
+  }
+
+  public void addMovie(Movie movie) {
+    this.movies.add(movie);
+    movie.setDirector(this);
   }
 }
Index: src/main/java/com/imdb/model/Genre.java
===================================================================
diff --git a/src/main/java/com/imdb/model/Genre.java b/src/main/java/com/imdb/model/Genre.java
deleted file mode 100644
--- a/src/main/java/com/imdb/model/Genre.java	
+++ /dev/null	
@@ -1,27 +0,0 @@
-package com.imdb.model;
-
-public enum Genre {
-  Action,
-  Adventure,
-  Animation,
-  Biography,
-  Comedy,
-  Police_officer,
-  Documentary,
-  Drama,
-  Family,
-  Fantasy,
-  Film_noir,
-  History,
-  Horror,
-  musical,
-  Mystery,
-  Romance,
-  Science_fiction,
-  Short_Film,
-  Sports,
-  Thriller,
-  War,
-  Western,
-  Others, // Add other genres as needed
-}
Index: src/main/java/com/imdb/controller/MovieController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.controller;\r\n\r\nimport com.imdb.appServices.ActorService;\r\nimport com.imdb.appServices.DirectorService;\r\nimport com.imdb.appServices.MovieService;\r\nimport com.imdb.model.Actor;\r\nimport com.imdb.model.Director;\r\nimport com.imdb.model.Movie;\r\nimport java.util.*;\r\n\r\npublic class MovieController {\r\n\r\n  //Verificar\r\n  private final MovieService movieService;\r\n  private final ActorService actorService;\r\n  private final DirectorService directorService;\r\n\r\n  public MovieController() {\r\n    movieService = new MovieService();\r\n    actorService = new ActorService();\r\n    directorService = new DirectorService();\r\n  }\r\n\r\n  private static final Scanner scanner = new Scanner(System.in);\r\n\r\n  public void registerNewMovie() {\r\n    System.out.print(\"Enter the name of the movie: \");\r\n    String name = scanner.nextLine();\r\n\r\n    Optional<Movie> optionalMovie = movieService.searchMovie(name);\r\n\r\n    if (optionalMovie.isPresent()) {\r\n      System.out.println(\"This movie title already exists.\");\r\n      System.out.print(\"Do you want to edit it? (Yes or No): \");\r\n      String editChoice = scanner.nextLine();\r\n      if (editChoice.equalsIgnoreCase(\"Yes\")) {\r\n        editMovie();\r\n      }\r\n      return;\r\n    }\r\n\r\n    int releaseDate = enterReleaseDate();\r\n    double budget = enterBudget();\r\n    String currency = enterCurrency();\r\n    String description = enterDescription();\r\n    List<Actor> actors = enterActors();\r\n    List<Director> directors = enterDirectors();\r\n\r\n    Movie newMovie = new Movie(\r\n      name,\r\n      releaseDate,\r\n      budget,\r\n      currency,\r\n      description,\r\n      actors,\r\n      directors\r\n    );\r\n    movieService.addMovie(newMovie);\r\n\r\n    System.out.print(\"Do you want to add a new movie? (Yes or No): \");\r\n    if (scanner.nextLine().equalsIgnoreCase(\"Yes\")) {\r\n      registerNewMovie();\r\n    } else {\r\n      System.out.println(\"Returning to main menu...\");\r\n    }\r\n  }\r\n\r\n  public void showListOfMovies() {\r\n    List<Movie> movies = movieService.getAllMovies();\r\n    if (movies.isEmpty()) {\r\n      System.out.println(\"No movies available.\");\r\n      return;\r\n    }\r\n\r\n    System.out.println(\"Movies List:\");\r\n    movies.forEach(movie ->\r\n      System.out.println(\"ID \" + movie.getId() + \": \" + movie.getTitle())\r\n    );\r\n    System.out.println(\r\n      \"Choose a movie ID to show all movie details or enter 0 to return:\"\r\n    );\r\n\r\n    int movieId = safeNextInt();\r\n    if (movieId == 0) return;\r\n\r\n    Optional<Movie> selectedMovie = movieService.searchMovieById(movieId);\r\n    if (selectedMovie.isEmpty()) {\r\n      System.out.println(\"Movie with ID \" + movieId + \" not found.\");\r\n      return;\r\n    }\r\n    printMovieDetails(selectedMovie.get());\r\n  }\r\n\r\n  private void printMovieDetails(Movie selectedMovie) {\r\n    System.out.println(\"Movie title: \" + selectedMovie.getTitle());\r\n    System.out.println(\"Release Date: \" + selectedMovie.getReleaseDate());\r\n    System.out.println(\r\n      \"Budget: \" + selectedMovie.getBudget() + \" \" + selectedMovie.getCurrency()\r\n    );\r\n    System.out.println(\"Description: \" + selectedMovie.getDescription());\r\n    System.out.println(\"List of Actors: \");\r\n    List<Actor> actors = selectedMovie.getActors();\r\n    for (int i = 0; i < actors.size(); i++) {\r\n      System.out.println(\r\n        (i + 1) +\r\n        \" - \" +\r\n        actors.get(i).getName() +\r\n        \"\\t\" +\r\n        actors.get(i).getNationality()\r\n      );\r\n    }\r\n    System.out.println(\"List of Directors: \");\r\n    List<Director> directors = selectedMovie.getDirectors();\r\n    for (int i = 0; i < directors.size(); i++) {\r\n      System.out.println(\r\n        (i + 1) +\r\n        \" - \" +\r\n        directors.get(i).getName() +\r\n        \"\\t\" +\r\n        directors.get(i).getNationality()\r\n      );\r\n    }\r\n\r\n    System.out.print(\"Do you want to edit this movie? (Yes or No): \");\r\n    String editChoice = scanner.nextLine();\r\n    if (editChoice.equalsIgnoreCase(\"Yes\")) {\r\n      editMovie();\r\n    } else {\r\n      System.out.println(\"Returning to the main menu...\");\r\n    }\r\n  }\r\n\r\n  private double enterBudget() {\r\n    System.out.print(\"Budget: \");\r\n    double budget = scanner.nextDouble();\r\n    scanner.nextLine();\r\n    return budget;\r\n  }\r\n\r\n  private int enterReleaseDate() {\r\n    System.out.print(\r\n      \"Enter Movie Release Date (Year of release that must accept a number with only 4 digits and must not start with 0): \"\r\n    );\r\n    while (true) {\r\n      try {\r\n        int releaseDate = Integer.parseInt(scanner.nextLine());\r\n        if (String.valueOf(releaseDate).length() != 4) {\r\n          throw new IllegalArgumentException(\r\n            \"The year of release must contain only 4 digits. Type it again!\"\r\n          );\r\n        } else if (String.valueOf(releaseDate).startsWith(\"0\")) {\r\n          throw new IllegalArgumentException(\r\n            \"Release year must not start with 0. Enter again!\"\r\n          );\r\n        }\r\n        return releaseDate;\r\n      } catch (NumberFormatException e) {\r\n        System.out.println(\r\n          \"The year of release must not contain letters. Type it again!\"\r\n        );\r\n      } catch (IllegalArgumentException e) {\r\n        System.out.println(e.getMessage());\r\n      }\r\n    }\r\n  }\r\n\r\n  private String enterCurrency() {\r\n    System.out.println(\r\n      \"Enter the movie Budget. Will it be in Euro, Dollar or Real?\"\r\n    );\r\n    System.out.println(\"1 - Euro\");\r\n    System.out.println(\"2 - Dollar\");\r\n    System.out.println(\"3 - Real\");\r\n    System.out.print(\"Enter your choice: \");\r\n    while (true) {\r\n      try {\r\n        int currencyChoice = Integer.parseInt(scanner.nextLine());\r\n        return switch (currencyChoice) {\r\n          case 1 -> \"Euro\";\r\n          case 2 -> \"Dollar\";\r\n          case 3 -> \"Real\";\r\n          default -> throw new IllegalArgumentException(\r\n            \"This currency does not exist. Enter a number from 1 to 3.\"\r\n          );\r\n        };\r\n      } catch (NumberFormatException e) {\r\n        System.out.println(\"Invalid input. Please enter a number.\");\r\n      } catch (IllegalArgumentException e) {\r\n        System.out.println(e.getMessage());\r\n      }\r\n    }\r\n  }\r\n\r\n  private String enterDescription() {\r\n    System.out.print(\r\n      \"Enter the description of the movie (must not exceed 500 words): \"\r\n    );\r\n    while (true) {\r\n      String description = scanner.nextLine();\r\n      if (description.length() > 500) {\r\n        System.out.println(\r\n          \"The description cannot exceed 500 words. Type it again!\"\r\n        );\r\n      } else {\r\n        return description;\r\n      }\r\n    }\r\n  }\r\n\r\n  private List<Actor> enterActors() {\r\n    List<Actor> actors = new ArrayList<>();\r\n    int numberOfActors;\r\n    while (true) {\r\n      System.out.print(\r\n        \"How many actors do you want to add? (It will not be possible to add more than 15 actors): \"\r\n      );\r\n      try {\r\n        numberOfActors = Integer.parseInt(scanner.nextLine());\r\n        if (numberOfActors < 1 || numberOfActors > 15) {\r\n          throw new IllegalArgumentException(\"You can enter up to 15 actors.\");\r\n        }\r\n        break;\r\n      } catch (NumberFormatException e) {\r\n        System.out.println(\"Invalid input. Please enter a number.\");\r\n      } catch (IllegalArgumentException e) {\r\n        System.out.println(e.getMessage());\r\n      }\r\n    }\r\n\r\n    for (int i = 1; i <= numberOfActors; i++) {\r\n      System.out.print(\"Enter the name of actor \" + i + \": \");\r\n      String actorName = scanner.nextLine();\r\n      Optional<Actor> existingActor = actorService.searchActor(actorName);\r\n\r\n      String nationality;\r\n      if (existingActor.isPresent()) {\r\n        System.out.println(\"Actor already exists.\");\r\n      } else {\r\n        System.out.print(\"Add nationality: \");\r\n        nationality = scanner.nextLine();\r\n        Actor newActor = new Actor(actorName, nationality);\r\n        actorService.addActor(newActor);\r\n        actors.add(newActor);\r\n      }\r\n    }\r\n    return actors;\r\n  }\r\n\r\n  private List<Director> enterDirectors() {\r\n    List<Director> directors = new ArrayList<>();\r\n    int numberOfDirectors;\r\n    while (true) {\r\n      System.out.print(\r\n        \"How many directors do you want to add? (It will not be possible to add more than 10 directors): \"\r\n      );\r\n      try {\r\n        numberOfDirectors = Integer.parseInt(scanner.nextLine());\r\n        if (numberOfDirectors < 1 || numberOfDirectors > 10) {\r\n          throw new IllegalArgumentException(\r\n            \"You can enter up to 10 directors.\"\r\n          );\r\n        }\r\n        break;\r\n      } catch (NumberFormatException e) {\r\n        System.out.println(\"Invalid input. Please enter a number.\");\r\n      } catch (IllegalArgumentException e) {\r\n        System.out.println(e.getMessage());\r\n      }\r\n    }\r\n\r\n    for (int i = 1; i <= numberOfDirectors; i++) {\r\n      System.out.print(\"Enter the name of director \" + i + \": \");\r\n      String directorName = scanner.nextLine();\r\n      Optional<Director> existingDirector = directorService.searchDirector(\r\n        directorName\r\n      );\r\n      String nationality;\r\n      if (existingDirector.isPresent()) {\r\n        System.out.println(\"Director already exists.\");\r\n      } else {\r\n        System.out.print(\"Add nationality: \");\r\n        nationality = scanner.nextLine();\r\n        Director newDiretor = new Director(directorName, nationality);\r\n        directorService.addDirector(newDiretor);\r\n        directors.add(newDiretor);\r\n      }\r\n    }\r\n    return directors;\r\n  }\r\n\r\n  public void editMovie() {\r\n    System.out.println(\"Which movie do you want to edit?\");\r\n    int movieIdToEdit = scanner.nextInt();\r\n    scanner.nextLine();\r\n\r\n    Optional<Movie> movieToEdit = movieService.searchMovieById(movieIdToEdit);\r\n    if (movieToEdit.isEmpty()) {\r\n      System.out.println(\"Editing movie: \" + movieToEdit.get().getTitle());\r\n      System.out.println(\"What would you like to edit?\");\r\n      System.out.println(\"1. Title\");\r\n      System.out.println(\"2. Release Date\");\r\n      System.out.println(\"3. Budget\");\r\n      System.out.println(\"4. Description\");\r\n      System.out.println(\"5. Actors\");\r\n      System.out.println(\"6. Directors\");\r\n      System.out.println(\"7. Cancel\");\r\n      System.out.print(\"Enter your choice: \");\r\n\r\n      int choice = safeNextInt();\r\n      switch (choice) {\r\n        case 1:\r\n          editTitle(movieToEdit.get());\r\n          break;\r\n        case 2:\r\n          editReleaseDate(movieToEdit.get());\r\n          break;\r\n        case 3:\r\n          editBudget(movieToEdit.get());\r\n          break;\r\n        case 4:\r\n          editDescription(movieToEdit.get());\r\n          break;\r\n        case 5:\r\n          //actorService.updateActor(movieToEdit.get().getActors());\r\n          break;\r\n        case 6:\r\n          //directorService.updateDirector(movieToEdit.get().getActors());\r\n          break;\r\n        case 7:\r\n          System.out.println(\"Cancelling movie edit.\");\r\n          break;\r\n        default:\r\n          System.out.println(\"Invalid choice.\");\r\n          break;\r\n      }\r\n    } else {\r\n      System.out.println(\"Movie with ID \" + movieIdToEdit + \" not found.\");\r\n    }\r\n  }\r\n\r\n  public void editTitle(Movie movie) {\r\n    System.out.print(\"Enter the new title: \");\r\n    String newTitle = scanner.nextLine();\r\n    movie.setTitle(newTitle);\r\n    System.out.println(\"Title updated successfully!\");\r\n  }\r\n\r\n  public void editReleaseDate(Movie movie) {\r\n    System.out.print(\"Enter the new release date: \");\r\n    int newReleaseDate = scanner.nextInt();\r\n    scanner.nextLine();\r\n    movie.setReleaseDate(newReleaseDate);\r\n    System.out.println(\"Release date updated successfully!\");\r\n  }\r\n\r\n  public void editBudget(Movie movie) {\r\n    System.out.print(\"Enter the new budget: \");\r\n    double newBudget = scanner.nextDouble();\r\n    scanner.nextLine();\r\n    movie.setBudget(newBudget);\r\n    System.out.println(\"Budget updated successfully!\");\r\n  }\r\n\r\n  public void editDescription(Movie movie) {\r\n    System.out.print(\"Enter the new description: \");\r\n    String newDescription = scanner.nextLine();\r\n    movie.setDescription(newDescription);\r\n    System.out.println(\"Description updated successfully!\");\r\n  }\r\n\r\n  public void deleteMovie() {\r\n    List<Movie> movies = movieService.getAllMovies();\r\n    if (movies.isEmpty()) {\r\n      System.out.println(\"No movies available for deletion.\");\r\n      return;\r\n    }\r\n\r\n    System.out.println(\"Movie List:\");\r\n    for (Movie movie : movies) {\r\n      System.out.println(\"ID \" + movie.getId() + \": \" + movie.getTitle());\r\n    }\r\n\r\n    System.out.print(\"Enter the ID of the movie you want to delete: \");\r\n    int movieIdToDelete = scanner.nextInt();\r\n    scanner.nextLine();\r\n\r\n    movieService.removeMovie(\r\n      movieService.searchMovieById(movieIdToDelete).get()\r\n    );\r\n  }\r\n\r\n  private int safeNextInt() {\r\n    while (true) {\r\n      try {\r\n        return scanner.nextInt();\r\n      } catch (InputMismatchException e) {\r\n        scanner.nextLine();\r\n        System.out.println(\"Invalid input. Please enter a valid number.\");\r\n      }\r\n    }\r\n  }\r\n\r\n  public void searchMovie() {\r\n    System.out.println(\"Menu - Search\");\r\n    System.out.println(\r\n      \"Do you want to search for a Movie Title, Actor, Director or Release Date?\"\r\n    );\r\n    System.out.println(\"1 - Movie Title\");\r\n    System.out.println(\"2 - Actor\");\r\n    System.out.println(\"3 - Director\");\r\n    System.out.println(\"4 - Release Date\");\r\n    System.out.print(\"Enter your choice: \");\r\n    int searchChoice = scanner.nextInt();\r\n    scanner.nextLine();\r\n\r\n    switch (searchChoice) {\r\n      case 1:\r\n        searchByTitle();\r\n        break;\r\n      case 2:\r\n        searchByActor();\r\n        break;\r\n      case 3:\r\n        searchByDirector();\r\n        break;\r\n      case 4:\r\n        searchByReleaseDate();\r\n        break;\r\n      default:\r\n        System.out.println(\"Invalid choice. Returning to main menu...\");\r\n    }\r\n  }\r\n\r\n  private void searchByTitle() {\r\n    System.out.print(\"What is the title of the movie you want to search for? \");\r\n    String title = scanner.nextLine();\r\n    ArrayList<Movie> foundMovies = new ArrayList<>();\r\n    for (Movie movie : movieService.getAllMovies()) {\r\n      if (movie.getTitle().equalsIgnoreCase(title)) {\r\n        foundMovies.add(movie);\r\n      }\r\n    }\r\n    displayMovieTitleSearchResult(foundMovies);\r\n  }\r\n\r\n  private void displayMovieTitleSearchResult(List<Movie> movies) {\r\n    if (movies.isEmpty()) {\r\n      System.out.println(\"No movies found.\");\r\n    } else {\r\n      for (Movie movie : movies) {\r\n        System.out.println(\"Movie title: \" + movie.getTitle());\r\n        System.out.println(\"Release Date: \" + movie.getReleaseDate());\r\n        System.out.println(\r\n          \"Budget: \" + movie.getBudget() + \" \" + movie.getCurrency()\r\n        );\r\n        System.out.println(\"Description: \" + movie.getDescription());\r\n        System.out.println(\"List of Actors:\");\r\n        for (Actor actor : movie.getActors()) {\r\n          System.out.println(actor.getName());\r\n        }\r\n        System.out.println(\"List of Directors:\");\r\n        for (Director director : movie.getDirectors()) {\r\n          System.out.println(director.getName());\r\n        }\r\n        System.out.println(\r\n          \"Do you want to look for another movie? (Yes or No): \"\r\n        );\r\n        String choice = scanner.nextLine();\r\n        if (!choice.equalsIgnoreCase(\"Yes\")) {\r\n          System.out.println(\"Returning to the main menu...\");\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private void searchByActor() {\r\n    System.out.print(\"Which actor do you want to look for? \");\r\n    String actorName = scanner.nextLine();\r\n    List<Movie> foundMovies = new ArrayList<>();\r\n    for (Movie movie : movieService.getAllMovies()) {\r\n      for (Actor actor : movie.getActors()) {\r\n        if (actor.getName().equalsIgnoreCase(actorName)) {\r\n          foundMovies.add(movie);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    displayActorSearchResult(foundMovies);\r\n  }\r\n\r\n  public void searchByDirector() {\r\n    System.out.print(\"Which director do you want to look for? \");\r\n    String directorName = scanner.nextLine();\r\n    Optional<Director> director = directorService.searchDirector(directorName);\r\n    if (director.isEmpty()) {\r\n      System.out.println(\"Director not found.\");\r\n      return;\r\n    }\r\n    searchByDirector(movieService.getAllMovies(), director.get());\r\n  }\r\n\r\n  private void searchByDirector(List<Movie> allMovies, Director director) {\r\n    List<Movie> foundMovies = new ArrayList<>();\r\n    for (Movie movie : allMovies) {\r\n      for (Director dir : movie.getDirectors()) {\r\n        if (dir.getName().equalsIgnoreCase(director.getName())) {\r\n          foundMovies.add(movie);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    displayDirectorSearchResult(foundMovies);\r\n  }\r\n\r\n  private void searchByReleaseDate() {\r\n    System.out.print(\"What release year are you looking for? \");\r\n    String releaseDate = scanner.nextLine();\r\n    List<Movie> foundMovies = new ArrayList<>();\r\n    for (Movie movie : movieService.getAllMovies()) {\r\n      if (String.valueOf(movie.getReleaseDate()).equals(releaseDate)) {\r\n        foundMovies.add(movie);\r\n      }\r\n    }\r\n    displayReleaseDateSearchResult(foundMovies);\r\n  }\r\n\r\n  private void displayActorSearchResult(List<Movie> movies) {\r\n    if (movies.isEmpty()) {\r\n      System.out.println(\"No movies found for this actor.\");\r\n    } else {\r\n      for (Movie movie : movies) {\r\n        System.out.println(\r\n          \"Movie title: \" +\r\n          movie.getTitle() +\r\n          \"\\tRelease Date: \" +\r\n          movie.getReleaseDate()\r\n        );\r\n      }\r\n      System.out.println(\r\n        \"Do you want to see more details about any movie on the list? (Yes or No): \"\r\n      );\r\n      String choice = scanner.nextLine();\r\n      if (choice.equalsIgnoreCase(\"Yes\")) {\r\n        System.out.print(\"Enter the movie ID: \");\r\n        int movieId = scanner.nextInt();\r\n        scanner.nextLine();\r\n        ArrayList<Movie> aux = new ArrayList<>();\r\n        aux.add(movieService.searchMovieById(movieId).get());\r\n        displayMovieTitleSearchResult(aux);\r\n      } else {\r\n        System.out.println(\"Returning to the main menu...\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private void displayDirectorSearchResult(List<Movie> movies) {\r\n    if (movies.isEmpty()) {\r\n      System.out.println(\"No movies found for this director.\");\r\n    } else {\r\n      for (Movie movie : movies) {\r\n        System.out.println(\r\n          \"Movie title: \" +\r\n          movie.getTitle() +\r\n          \"\\tRelease Date: \" +\r\n          movie.getReleaseDate()\r\n        );\r\n      }\r\n      System.out.println(\r\n        \"Do you want to see more details about any movie on the list? (Yes or No): \"\r\n      );\r\n      String choice = scanner.nextLine();\r\n      if (choice.equalsIgnoreCase(\"Yes\")) {\r\n        System.out.print(\"Enter the movie ID: \");\r\n        int movieId = scanner.nextInt();\r\n        scanner.nextLine();\r\n        Optional<Movie> selectedMovie = movieService.searchMovieById(movieId);\r\n        if (selectedMovie.isPresent()) {\r\n          printMovieDetails(selectedMovie.get());\r\n        } else {\r\n          System.out.println(\"Movie with ID \" + movieId + \" not found.\");\r\n        }\r\n      } else {\r\n        System.out.println(\"Returning to the main menu...\");\r\n      }\r\n    }\r\n  }\r\n\r\n  private void displayReleaseDateSearchResult(List<Movie> movies) {\r\n    if (movies.isEmpty()) {\r\n      System.out.println(\"No movies found for this release year.\");\r\n    } else {\r\n      for (Movie movie : movies) {\r\n        System.out.println(\"Movie title: \" + movie.getTitle());\r\n      }\r\n      System.out.println(\r\n        \"Do you want to see more details about any movie on the list? (Yes or No): \"\r\n      );\r\n      String choice = scanner.nextLine();\r\n      if (choice.equalsIgnoreCase(\"Yes\")) {\r\n        System.out.print(\"Enter the movie ID: \");\r\n        int movieId = scanner.nextInt();\r\n        scanner.nextLine();\r\n        ArrayList<Movie> aux = new ArrayList<>();\r\n        aux.add(movieService.searchMovieById(movieId).get());\r\n        displayMovieTitleSearchResult(aux);\r\n      } else {\r\n        System.out.println(\"Returning to the main menu...\");\r\n      }\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/imdb/controller/MovieController.java b/src/main/java/com/imdb/controller/MovieController.java
--- a/src/main/java/com/imdb/controller/MovieController.java	
+++ b/src/main/java/com/imdb/controller/MovieController.java	
@@ -3,22 +3,21 @@
 import com.imdb.appServices.ActorService;
 import com.imdb.appServices.DirectorService;
 import com.imdb.appServices.MovieService;
-import com.imdb.model.Actor;
-import com.imdb.model.Director;
-import com.imdb.model.Movie;
-import java.util.*;
+import com.imdb.service.impl.MovieServiceImpl;
+import com.imdb.service.DTO.MovieDTO;
+import com.imdb.util.ValidationService;
+import java.util.List;
+import java.util.Scanner;
 
 public class MovieController {
 
-  //Verificar
-  private final MovieService movieService;
-  private final ActorService actorService;
-  private final DirectorService directorService;
+  private final MovieServiceImpl movieService;
+  private final ValidationService validationService;
+  private final Scanner scanner = new Scanner(System.in);
 
-  public MovieController() {
-    movieService = new MovieService();
-    actorService = new ActorService();
-    directorService = new DirectorService();
+  public MovieController(MovieServiceImpl movieService, ValidationService validationService) {
+    this.movieService = movieService;
+    this.validationService = validationService;
   }
 
   private static final Scanner scanner = new Scanner(System.in);
Index: src/main/java/com/imdb/appServices/ValidationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.appServices;\r\n\r\nimport com.imdb.model.Genre;\r\nimport java.util.EnumSet;\r\nimport java.util.Scanner;\r\n\r\npublic class ValidationService {\r\n\r\n  private static String getInput(Scanner sc) {\r\n    return sc.nextLine();\r\n  }\r\n\r\n  private static int isInputInt(Scanner sc) {\r\n    // Checks if the entered input is an integer number\r\n    try {\r\n      return Integer.parseInt(getInput(sc));\r\n    } catch (NumberFormatException e) {\r\n      System.out.println(\"This option is invalid, must be a integer number.\");\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  private static double isInputDouble(Scanner sc) {\r\n    // Checks if the entered input is a fractional number\r\n    try {\r\n      return Double.parseDouble(getInput(sc));\r\n    } catch (NumberFormatException e) {\r\n      System.out.println(\"This input is invalid, must be a number.\");\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  public static int isValidOption(Scanner sc, int rangeMax, int rangeMin) {\r\n    // Checks if the entered option is a number and if it is within the range of options\r\n    final int userChoice = isInputInt(sc);\r\n\r\n    if (userChoice == -1) {\r\n      return -1;\r\n    } else if (userChoice >= rangeMin && userChoice <= rangeMax) {\r\n      return userChoice;\r\n    } else {\r\n      System.out.println(\r\n        \"This option is invalid, you must choose a number from \" +\r\n        rangeMin +\r\n        \" to \" +\r\n        rangeMax\r\n      );\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  public static String isValidMovieName(Scanner sc) {\r\n    /*Check if the movie title is not empty,\r\n     if there are no unnecessary spaces,\r\n     and if it has more than 3 letters*/\r\n    final String userInput = getInput(sc);\r\n\r\n    if (\r\n      userInput != null &&\r\n      !userInput.trim().isEmpty() &&\r\n      userInput.length() >= 3\r\n    ) {\r\n      return userInput;\r\n    } else {\r\n      System.out.println(\r\n        \"Invalid title! The movie name must be at least 3 characters long.\"\r\n      );\r\n      return isValidMovieName(sc);\r\n    }\r\n  }\r\n\r\n  public static int isValidId(Scanner sc) {\r\n    try {\r\n      return Integer.parseInt(getInput(sc));\r\n    } catch (NumberFormatException e) {\r\n      System.out.println(\"Dígito inválido. Tente novamente!\");\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  public static boolean isValidMovieId(int id) {\r\n    // Verifica se o ID é positivo\r\n    return id > 0;\r\n  }\r\n\r\n  public static boolean isValidGenre(Genre genre) {\r\n    // Verifica se o gênero está presente no enum\r\n    return EnumSet.allOf(Genre.class).contains(genre);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/imdb/appServices/ValidationService.java b/src/main/java/com/imdb/appServices/ValidationService.java
--- a/src/main/java/com/imdb/appServices/ValidationService.java	
+++ b/src/main/java/com/imdb/appServices/ValidationService.java	
@@ -1,11 +1,84 @@
 package com.imdb.appServices;
 
-import com.imdb.model.Genre;
 import java.util.EnumSet;
 import java.util.Scanner;
+import java.util.regex.Pattern;
 
 public class ValidationService {
 
+  private static final Pattern YEAR_PATTERN = Pattern.compile("^[1-9]\\d{3}$");
+  private static final int MAX_ACTORS = 15;
+  private static final int MAX_DIRECTORS = 10;
+  private static final int MAX_DESCRIPTION_WORDS = 500;
+
+  public boolean validateMovieTitleUnique(String title, List<MovieDTO> existingMovies) {
+    return existingMovies.stream().noneMatch(movie -> movie.getTitle().equalsIgnoreCase(title));
+  }
+
+  public boolean validateYearFormat(String year) {
+    return YEAR_PATTERN.matcher(year).matches();
+  }
+
+  public boolean validateCurrencyOption(int option) {
+    return option >= 1 && option <= 3;
+  }
+
+  public boolean validateBudgetFormat(String budget) {
+    try {
+      Double.parseDouble(budget);
+      return true;
+    } catch (NumberFormatException e) {
+      return false;
+    }
+  }
+
+  public boolean validateDescriptionLength(String description) {
+    int wordCount = description.split("\\s+").length;
+    return wordCount <= MAX_DESCRIPTION_WORDS;
+  }
+
+  public boolean validateActorLimit(int numberOfActors) {
+    return numberOfActors >= 1 && numberOfActors <= MAX_ACTORS;
+  }
+
+  public boolean validateDirectorLimit(int numberOfDirectors) {
+    return numberOfDirectors >= 1 && numberOfDirectors <= MAX_DIRECTORS;
+  }
+
+  public boolean validateUniqueNewMovieTitle(String newTitle, Long movieIdToEdit, List<MovieDTO> existingMovies) {
+    return existingMovies.stream()
+            .filter(movie -> !movie.getId().equals(movieIdToEdit)) // Ignora o filme atualmente sendo editado
+            .noneMatch(movie -> movie.getTitle().equalsIgnoreCase(newTitle));
+  }
+
+  public boolean validateSameTitle(String newTitle, String existingTitle) {
+    return newTitle.equalsIgnoreCase(existingTitle);
+  }
+
+  public boolean validateSameYear(String newYear, String existingYear) {
+    return newYear.equals(existingYear);
+  }
+
+  public boolean validateSameBudget(double newBudget, double existingBudget) {
+    return Double.compare(newBudget, existingBudget) == 0;
+  }
+
+  public boolean validateActorNotRepeatedInMovie(String actorName, List<String> existingActorNames) {
+    return existingActorNames.stream().noneMatch(name -> name.equalsIgnoreCase(actorName));
+  }
+
+  public boolean validateDirectorNotRepeatedInMovie(String directorName, List<String> existingDirectorNames) {
+    return existingDirectorNames.stream().noneMatch(name -> name.equalsIgnoreCase(directorName));
+  }
+
+  public boolean validateMinimumActors(int numberOfActors) {
+    return numberOfActors >= 1;
+  }
+
+  public boolean validateMinimumDirectors(int numberOfDirectors) {
+    return numberOfDirectors >= 1;
+  }
+
   private static String getInput(Scanner sc) {
     return sc.nextLine();
   }
Index: src/main/java/com/imdb/model/Actor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.model;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic class Actor extends Person {\r\n\r\n  public Actor(String name, String nationality) {\r\n    super(name, nationality);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/imdb/model/Actor.java b/src/main/java/com/imdb/model/Actor.java
--- a/src/main/java/com/imdb/model/Actor.java	
+++ b/src/main/java/com/imdb/model/Actor.java	
@@ -1,10 +1,29 @@
 package com.imdb.model;
 
-import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
 
 public class Actor extends Person {
+  private Set<Movie> movies = new HashSet<>();
+
+  public Actor() {}
+
+  public Actor(Long id, String name, String nationality) {
+    super(id, name, nationality);
+  }
+
+  public Set<Movie> getMovies() {
+    return movies;
+  }
 
-  public Actor(String name, String nationality) {
-    super(name, nationality);
+  public void setMovies(Set<Movie> movies) {
+    this.movies = movies;
+  }
+
+  public void addMovie(Movie movie) {
+    if (!this.movies.contains(movie)) {
+      this.movies.add(movie);
+      movie.getActors().add(this);
+    }
   }
 }
Index: src/main/java/com/imdb/model/Person.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.model;\r\n\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.io.Serializable;\r\n\r\npublic abstract class Person {\r\n\r\n  private int id;\r\n  private String name;\r\n  private String nationality;\r\n\r\n  public Person(String name, String nationality) {\r\n    this.name = name;\r\n    this.nationality = nationality;\r\n  }\r\n\r\n  public int getId() {\r\n    return id;\r\n  }\r\n\r\n  public void setId(int id) {\r\n    this.id = id;\r\n  }\r\n\r\n  public String getName() {\r\n    return name;\r\n  }\r\n\r\n  public void setName(String name) {\r\n    this.name = name;\r\n  }\r\n\r\n  public String getNationality() {\r\n    return nationality;\r\n  }\r\n\r\n  public void setNationality(String nationality) {\r\n    this.nationality = nationality;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/imdb/model/Person.java b/src/main/java/com/imdb/model/Person.java
--- a/src/main/java/com/imdb/model/Person.java	
+++ b/src/main/java/com/imdb/model/Person.java	
@@ -11,16 +11,17 @@
   private String name;
   private String nationality;
 
-  public Person(String name, String nationality) {
+  public Person(Long id, String name, String nationality) {
+    this.id = id;
     this.name = name;
     this.nationality = nationality;
   }
 
-  public int getId() {
+  public Long getId() {
     return id;
   }
 
-  public void setId(int id) {
+  public void setId(Long id) {
     this.id = id;
   }
 
@@ -39,4 +40,13 @@
   public void setNationality(String nationality) {
     this.nationality = nationality;
   }
+
+  @Override
+  public String toString() {
+    return getClass().getSimpleName() + "{" +
+            "id=" + id +
+            ", name='" + name + '\'' +
+            ", nationality='" + nationality + '\'' +
+            '}';
+  }
 }
Index: src/main/java/com/imdb/model/Movie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.imdb.model;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Movie {\r\n\r\n  private int id;\r\n  private String title;\r\n  private int releaseDate;\r\n  private double budget;\r\n  private String currency;\r\n  private String description;\r\n  private final List<Director> directors;\r\n  private final List<Actor> actors;\r\n\r\n  public Movie(\r\n    String title,\r\n    int releaseDate,\r\n    double budget,\r\n    String currency,\r\n    String description,\r\n    List<Actor> actors,\r\n    List<Director> directors\r\n  ) {\r\n    this.title = title;\r\n    this.releaseDate = releaseDate;\r\n    this.budget = budget;\r\n    this.currency = currency;\r\n    this.description = description;\r\n    this.actors = actors;\r\n    this.directors = directors;\r\n  }\r\n\r\n  public int getId() {\r\n    return id;\r\n  }\r\n\r\n  public void setId(int id) {\r\n    this.id = id;\r\n  }\r\n\r\n  public String getTitle() {\r\n    return title;\r\n  }\r\n\r\n  public void setTitle(String title) {\r\n    this.title = title;\r\n  }\r\n\r\n  public int getReleaseDate() {\r\n    return releaseDate;\r\n  }\r\n\r\n  public void setReleaseDate(int releaseDate) {\r\n    this.releaseDate = releaseDate;\r\n  }\r\n\r\n  public double getBudget() {\r\n    return budget;\r\n  }\r\n\r\n  public void setBudget(double budget) {\r\n    this.budget = budget;\r\n  }\r\n\r\n  public String getCurrency() {\r\n    return currency;\r\n  }\r\n\r\n  public void setCurrency(String currency) {\r\n    this.currency = currency;\r\n  }\r\n\r\n  public String getDescription() {\r\n    return description;\r\n  }\r\n\r\n  public void setDescription(String description) {\r\n    this.description = description;\r\n  }\r\n\r\n  public List<Actor> getActors() {\r\n    return actors;\r\n  }\r\n\r\n  public List<Director> getDirectors() {\r\n    return directors;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/imdb/model/Movie.java b/src/main/java/com/imdb/model/Movie.java
--- a/src/main/java/com/imdb/model/Movie.java	
+++ b/src/main/java/com/imdb/model/Movie.java	
@@ -1,91 +1,102 @@
 package com.imdb.model;
 
 import java.io.*;
-import java.util.ArrayList;
-import java.util.List;
+import java.math.BigDecimal;
+import java.util.*;
+
+public class Movie {
+
 
-public class Movie {
-
-  private int id;
-  private String title;
-  private int releaseDate;
-  private double budget;
-  private String currency;
-  private String description;
-  private final List<Director> directors;
-  private final List<Actor> actors;
+    public class Movie {
+        private Long id;
+        private String title;
+        private Date releaseDate;
+        private BigDecimal budget;
+        private Currency currency;
+        private String description;
+        private Set<Actor> actors = new HashSet<>();
+        private Set<Director> directors = new HashSet<>();
 
-  public Movie(
-    String title,
-    int releaseDate,
-    double budget,
-    String currency,
-    String description,
-    List<Actor> actors,
-    List<Director> directors
-  ) {
-    this.title = title;
-    this.releaseDate = releaseDate;
-    this.budget = budget;
-    this.currency = currency;
-    this.description = description;
-    this.actors = actors;
-    this.directors = directors;
-  }
+        public Movie() {
+        }
 
-  public int getId() {
-    return id;
-  }
+        public Long getId() {
+            return id;
+        }
 
-  public void setId(int id) {
-    this.id = id;
-  }
+        public void setId(Long id) {
+            this.id = id;
+        }
 
-  public String getTitle() {
-    return title;
-  }
+        public String getTitle() {
+            return title;
+        }
 
-  public void setTitle(String title) {
-    this.title = title;
-  }
+        public void setTitle(String title) {
+            this.title = title;
+        }
 
-  public int getReleaseDate() {
-    return releaseDate;
-  }
+        public Date getReleaseDate() {
+            return releaseDate;
+        }
 
-  public void setReleaseDate(int releaseDate) {
-    this.releaseDate = releaseDate;
-  }
+        public void setReleaseDate(Date releaseDate) {
+            this.releaseDate = releaseDate;
+        }
 
-  public double getBudget() {
-    return budget;
-  }
+        public BigDecimal getBudget() {
+            return budget;
+        }
 
-  public void setBudget(double budget) {
-    this.budget = budget;
-  }
+        public void setBudget(BigDecimal budget) {
+            this.budget = budget;
+        }
 
-  public String getCurrency() {
-    return currency;
-  }
+        public Currency getCurrency() {
+            return currency;
+        }
 
-  public void setCurrency(String currency) {
-    this.currency = currency;
-  }
+        public void setCurrency(Currency currency) {
+            this.currency = currency;
+        }
 
-  public String getDescription() {
-    return description;
-  }
+        public String getDescription() {
+            return description;
+        }
 
-  public void setDescription(String description) {
-    this.description = description;
-  }
+        public void setDescription(String description) {
+            this.description = description;
+        }
 
-  public List<Actor> getActors() {
-    return actors;
-  }
+        public Set<Actor> getActors() { return actors; }
 
-  public List<Director> getDirectors() {
-    return directors;
-  }
-}
+        public Set<Director> getDirectors() {
+            return directors;
+        }
+
+        public void addActor(Actor actor) {
+            if (!this.actors.contains(actor)) {
+                this.actors.add(actor);
+                actor.getMovies().add(this);
+            }
+        }
+
+        public void addDirector(Director director) {
+            if (!this.directors.contains(director)) {
+                this.directors.add(director);
+                director.getMovies().add(this);
+            }
+        }
+
+        @Override
+        public String toString() {
+            return "Movie{" +
+                    "id=" + id +
+                    ", title='" + title + '\'' +
+                    ", releaseDate=" + releaseDate +
+                    ", budget=" + budget +
+                    ", currency=" + currency +
+                    ", description=" + description +
+                    '}';
+        }
+    }
